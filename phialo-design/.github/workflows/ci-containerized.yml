name: CI - Containerized

on:
  pull_request:
    branches: [main, master]
  push:
    branches: [main, master]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-ci

jobs:
  # Build and cache the CI image
  build-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{date 'YYYYMMDD'}}-

      - name: Build and push CI image
        uses: docker/build-push-action@v5
        with:
          context: ./phialo-design
          file: ./phialo-design/Dockerfile.ci
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # Run tests in parallel using the cached image
  test:
    needs: build-image
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.build-image.outputs.image-tag }}
      options: --user root
    strategy:
      matrix:
        test-suite:
          - unit
          - lint
          - typecheck
          - build
    steps:
      - name: Run ${{ matrix.test-suite }} tests
        run: |
          cd /app
          case "${{ matrix.test-suite }}" in
            unit)
              pnpm test:run --coverage
              ;;
            lint)
              pnpm lint
              ;;
            typecheck)
              pnpm typecheck
              ;;
            build)
              pnpm build
              ;;
          esac

      - name: Upload coverage
        if: matrix.test-suite == 'unit'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: /app/coverage

  # E2E tests need special handling
  e2e:
    needs: build-image
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.build-image.outputs.image-tag }}
      options: --user root --ipc=host
    steps:
      - name: Run E2E tests
        run: |
          cd /app
          # Start the dev server in background
          pnpm dev &
          # Wait for server to be ready
          npx wait-on http://localhost:4321 -t 30000
          # Run E2E tests
          pnpm test:e2e:ci
        env:
          PLAYWRIGHT_BROWSERS_PATH: /usr/bin

  # Build production image (optional)
  build-prod:
    needs: [test, e2e]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: ./phialo-design
          file: ./phialo-design/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64