name: Reusable Docker Build

on:
  workflow_call:
    inputs:
      dockerfile:
        description: 'Path to Dockerfile'
        required: true
        type: string
      context:
        description: 'Build context path'
        required: false
        type: string
        default: '.'
      image-name:
        description: 'Image name (without registry)'
        required: true
        type: string
      platforms:
        description: 'Target platforms'
        required: false
        type: string
        default: 'linux/amd64,linux/arm64'
      push:
        description: 'Push image to registry'
        required: false
        type: boolean
        default: true
      scan-image:
        description: 'Run security scanning'
        required: false
        type: boolean
        default: true
      cache-key:
        description: 'Cache key prefix'
        required: false
        type: string
        default: 'buildcache'
    outputs:
      image:
        description: 'Full image name with tag'
        value: ${{ jobs.build.outputs.image }}
      digest:
        description: 'Image digest'
        value: ${{ jobs.build.outputs.digest }}

env:
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    outputs:
      image: ${{ steps.meta.outputs.tags }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ inputs.platforms }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Log in to GitHub Container Registry
        if: inputs.push
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ inputs.image-name }}
          tags: |
            # Set latest tag for default branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Branch name
            type=ref,event=branch
            # PR number
            type=ref,event=pr
            # Tag name
            type=ref,event=tag
            # Semantic versions
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            # Short SHA
            type=sha,format=short
            # Long SHA for production
            type=sha,format=long,enable=${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
            # Date stamp
            type=raw,value={{date 'YYYYMMDD-HHmmss' tz='UTC'}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          push: ${{ inputs.push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ inputs.platforms }}
          cache-from: |
            type=gha,scope=${{ inputs.cache-key }}-${{ github.ref }}
            type=gha,scope=${{ inputs.cache-key }}-${{ github.base_ref || 'main' }}
            type=registry,ref=${{ env.REGISTRY }}/${{ inputs.image-name }}:buildcache
          cache-to: |
            type=gha,mode=max,scope=${{ inputs.cache-key }}-${{ github.ref }}
            type=registry,ref=${{ env.REGISTRY }}/${{ inputs.image-name }}:buildcache,mode=max,oci-mediatypes=true
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}
          provenance: true
          sbom: true

      - name: Run Trivy vulnerability scanner
        if: inputs.scan-image && inputs.push
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0' # Don't fail the build

      - name: Upload Trivy scan results to GitHub Security
        if: inputs.scan-image && inputs.push
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-${{ inputs.image-name }}'

      - name: Generate SBOM
        if: inputs.push && github.event_name == 'push'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.meta.outputs.tags }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        if: inputs.push && github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ inputs.image-name }}-${{ github.sha }}
          path: sbom.spdx.json
          retention-days: 30

      - name: Image digest
        if: inputs.push
        run: |
          echo "Image pushed with digest: ${{ steps.build.outputs.digest }}"
          echo "Tags: ${{ steps.meta.outputs.tags }}"