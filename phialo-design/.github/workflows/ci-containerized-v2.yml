name: CI - Containerized v2

on:
  pull_request:
    branches: [main, master]
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      force-rebuild:
        description: 'Force rebuild images'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  CI_IMAGE: ${{ github.repository }}-ci

jobs:
  # Check if we need to rebuild the image
  check-image:
    runs-on: ubuntu-latest
    outputs:
      needs-rebuild: ${{ steps.check.outputs.rebuild }}
      image-exists: ${{ steps.check.outputs.exists }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check if image rebuild needed
        id: check
        run: |
          # Check if force rebuild requested
          if [[ "${{ inputs.force-rebuild }}" == "true" ]]; then
            echo "rebuild=true" >> $GITHUB_OUTPUT
            echo "exists=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if Dockerfile or dependencies changed
          if git diff --name-only HEAD~1 HEAD | grep -E "(Dockerfile|package.json|pnpm-lock.yaml)"; then
            echo "rebuild=true" >> $GITHUB_OUTPUT
          else
            echo "rebuild=false" >> $GITHUB_OUTPUT
          fi
          
          # Check if image exists
          if docker manifest inspect ${{ env.REGISTRY }}/${{ env.CI_IMAGE }}:${{ github.sha }} > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

  # Build CI image using reusable workflow
  build-image:
    needs: check-image
    if: needs.check-image.outputs.needs-rebuild == 'true' || needs.check-image.outputs.image-exists == 'false'
    uses: ./.github/workflows/docker-build-reusable.yml
    with:
      dockerfile: ./phialo-design/Dockerfile.ci
      context: ./phialo-design
      image-name: ${{ github.repository }}-ci
      platforms: linux/amd64,linux/arm64
      push: true
      scan-image: true
      cache-key: ci
    permissions:
      contents: read
      packages: write
      security-events: write

  # Determine which image to use
  get-image:
    needs: [check-image, build-image]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.determine.outputs.image }}
    steps:
      - name: Determine image to use
        id: determine
        run: |
          if [[ "${{ needs.build-image.result }}" == "success" ]]; then
            echo "image=${{ needs.build-image.outputs.image }}" >> $GITHUB_OUTPUT
          else
            # Use existing image with current SHA or latest
            echo "image=${{ env.REGISTRY }}/${{ env.CI_IMAGE }}:${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

  # Run tests in parallel using containers
  test:
    needs: get-image
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.get-image.outputs.image }}
      options: --user root
    strategy:
      fail-fast: false
      matrix:
        test-suite:
          - name: unit
            command: pnpm test:run --coverage
            upload-coverage: true
          - name: lint
            command: pnpm lint
          - name: typecheck
            command: pnpm typecheck
          - name: format
            command: pnpm format:check
          - name: build
            command: pnpm build
    steps:
      - name: Test Info
        run: |
          echo "Running ${{ matrix.test-suite.name }} tests"
          echo "Image: ${{ needs.get-image.outputs.image }}"
          echo "Node version: $(node --version)"
          echo "pnpm version: $(pnpm --version)"

      - name: Run ${{ matrix.test-suite.name }}
        run: |
          cd /app
          ${{ matrix.test-suite.command }}

      - name: Upload coverage
        if: matrix.test-suite.upload-coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: /app/coverage
          flags: unit
          name: unit-tests

  # E2E tests with browser
  e2e:
    needs: get-image
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.get-image.outputs.image }}
      options: --user root --ipc=host --shm-size=2gb
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox]
        shard: [1, 2, 3]
    steps:
      - name: E2E Test Info
        run: |
          echo "Browser: ${{ matrix.browser }}"
          echo "Shard: ${{ matrix.shard }}/3"

      - name: Run E2E tests
        run: |
          cd /app
          # Start dev server
          pnpm dev &
          SERVER_PID=$!
          
          # Wait for server
          npx wait-on http://localhost:4321 -t 30000
          
          # Run tests
          pnpm test:e2e:ci --browser=${{ matrix.browser }} --shard=${{ matrix.shard }}/3
          
          # Stop server
          kill $SERVER_PID || true
        env:
          PLAYWRIGHT_BROWSERS_PATH: /usr/bin
          CI: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results-${{ matrix.browser }}-${{ matrix.shard }}
          path: /app/test-results/
          retention-days: 7

  # Merge E2E test results
  e2e-report:
    needs: e2e
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: e2e-results-*
          merge-multiple: true

      - name: Merge test reports
        run: |
          npx playwright merge-reports --reporter=html ./e2e-results-*
          
      - name: Upload merged report
        uses: actions/upload-artifact@v4
        with:
          name: e2e-report-combined
          path: playwright-report/
          retention-days: 30

  # Build production image on main branch
  build-prod:
    needs: [test, e2e]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    uses: ./.github/workflows/docker-build-reusable.yml
    with:
      dockerfile: ./phialo-design/Dockerfile
      context: ./phialo-design
      image-name: ${{ github.repository }}
      platforms: linux/amd64,linux/arm64
      push: true
      scan-image: true
      cache-key: prod
    permissions:
      contents: read
      packages: write
      security-events: write

  # Summary job
  ci-summary:
    needs: [test, e2e, build-prod]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check results
        run: |
          echo "## CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Test results
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Production build
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "### Production Build" >> $GITHUB_STEP_SUMMARY
            echo "Status: ${{ needs.build-prod.result }}" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ needs.build-prod.result }}" == "success" ]]; then
              echo "Image: ${{ needs.build-prod.outputs.image }}" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Overall status
          if [[ "${{ needs.test.result }}" == "success" && "${{ needs.e2e.result }}" == "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All checks passed!**" >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Some checks failed**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi