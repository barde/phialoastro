name: Docker Registry Example

# This is an example workflow showing how to use the Docker registry
# It demonstrates building, pushing, and using images from GHCR

on:
  workflow_dispatch:
    inputs:
      image-type:
        description: 'Type of image to work with'
        required: true
        type: choice
        options:
          - ci
          - dev
          - prod
        default: ci

env:
  REGISTRY: ghcr.io

jobs:
  # Example 1: Build a custom image using the reusable workflow
  build-custom-image:
    uses: ./.github/workflows/docker-build-reusable.yml
    with:
      dockerfile: ./phialo-design/Dockerfile.${{ inputs.image-type }}
      context: ./phialo-design
      image-name: ${{ github.repository }}-example-${{ inputs.image-type }}
      platforms: linux/amd64,linux/arm64
      push: true
      scan-image: true
      cache-key: example-${{ inputs.image-type }}
    permissions:
      contents: read
      packages: write
      security-events: write

  # Example 2: Use the built image to run tests
  use-image:
    needs: build-custom-image
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.build-custom-image.outputs.image }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Show environment
        run: |
          echo "Running in container: ${{ needs.build-custom-image.outputs.image }}"
          echo "Node version: $(node --version)"
          echo "pnpm version: $(pnpm --version)"
          echo "Working directory: $(pwd)"
          ls -la

      - name: Run example commands
        run: |
          cd /app
          case "${{ inputs.image-type }}" in
            ci)
              echo "Running CI commands..."
              pnpm typecheck || echo "Typecheck completed"
              ;;
            dev)
              echo "Running dev commands..."
              pnpm --version
              ;;
            prod)
              echo "Running prod commands..."
              ls -la dist/ || echo "No dist directory yet"
              ;;
          esac

  # Example 3: Pull and inspect existing images
  inspect-registry:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: List available images
        run: |
          echo "## Available Images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Note: This requires the GitHub CLI and proper permissions
          # In practice, you might use the packages API
          
          for IMAGE in "phialoastro" "phialoastro-ci" "phialoastro-dev"; do
            echo "### ${IMAGE}" >> $GITHUB_STEP_SUMMARY
            
            # Pull image info if it exists
            if docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${IMAGE}:latest 2>/dev/null; then
              SIZE=$(docker images --format "{{.Size}}" ${{ env.REGISTRY }}/${{ github.repository_owner }}/${IMAGE}:latest)
              echo "- Latest tag size: ${SIZE}" >> $GITHUB_STEP_SUMMARY
              
              # Get image digest
              DIGEST=$(docker inspect --format='{{.RepoDigests}}' ${{ env.REGISTRY }}/${{ github.repository_owner }}/${IMAGE}:latest)
              echo "- Digest: ${DIGEST}" >> $GITHUB_STEP_SUMMARY
            else
              echo "- Image not found or not accessible" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          done

  # Example 4: Multi-stage workflow using different images
  multi-stage-example:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build in CI container
        uses: docker://ghcr.io/barde/phialoastro-ci:latest
        with:
          args: |
            sh -c "cd /github/workspace/phialo-design && pnpm install --frozen-lockfile && pnpm build"

      - name: Test build artifacts
        run: |
          echo "Build artifacts:"
          ls -la phialo-design/dist/ || echo "No dist directory found"

  # Example 5: Using Docker Compose with GHCR images
  compose-example:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create example docker-compose.yml
        run: |
          cat > docker-compose.example.yml << 'EOF'
          version: '3.8'
          services:
            app:
              image: ghcr.io/${{ github.repository }}:latest
              ports:
                - "4321:4321"
              environment:
                - NODE_ENV=production
            
            ci:
              image: ghcr.io/${{ github.repository }}-ci:latest
              command: pnpm test:run
              volumes:
                - ./test-results:/app/test-results
          EOF

      - name: Show Docker Compose example
        run: |
          echo "## Docker Compose Example" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "```yaml" >> $GITHUB_STEP_SUMMARY
          cat docker-compose.example.yml >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY

  # Example 6: Cache inspection
  cache-info:
    runs-on: ubuntu-latest
    steps:
      - name: Cache statistics
        run: |
          echo "## Cache Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Cache Types Used:" >> $GITHUB_STEP_SUMMARY
          echo "1. **GitHub Actions Cache (gha)**: Fast, ephemeral, branch-specific" >> $GITHUB_STEP_SUMMARY
          echo "2. **Registry Cache**: Persistent, stored in GHCR" >> $GITHUB_STEP_SUMMARY
          echo "3. **Inline Cache**: BuildKit inline cache in image layers" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Cache Keys:" >> $GITHUB_STEP_SUMMARY
          echo "- Current branch: \`${{ inputs.image-type }}-${{ github.ref }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Fallback: \`${{ inputs.image-type }}-main\`" >> $GITHUB_STEP_SUMMARY
          echo "- Registry: \`ghcr.io/${{ github.repository }}-${{ inputs.image-type }}:buildcache\`" >> $GITHUB_STEP_SUMMARY