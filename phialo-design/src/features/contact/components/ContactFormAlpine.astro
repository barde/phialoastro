---
export interface Props {
  lang?: 'de' | 'en';
}

const { lang = 'de' } = Astro.props;
const isGerman = lang === 'de';

// Translations
const translations = {
  de: {
    nameLabel: 'Name',
    namePlaceholder: 'Ihr Name',
    nameRequired: 'Name ist erforderlich',
    nameInvalid: 'Name muss zwischen 2 und 100 Zeichen lang sein',
    emailLabel: 'E-Mail',
    emailPlaceholder: 'ihre@email.de',
    emailRequired: 'E-Mail ist erforderlich',
    emailInvalid: 'Bitte geben Sie eine gültige E-Mail-Adresse ein',
    phoneLabel: 'Telefon (optional)',
    phonePlaceholder: '+49 123 456789',
    phoneInvalid: 'Bitte geben Sie eine gültige Telefonnummer ein',
    messageLabel: 'Nachricht',
    messagePlaceholder: 'Erzählen Sie uns von Ihrem Projekt...',
    messageRequired: 'Nachricht ist erforderlich',
    messageTooShort: 'Nachricht muss mindestens 10 Zeichen lang sein',
    submitButton: 'Nachricht senden',
    submitting: 'Wird gesendet...',
    sendCopyLabel: 'Eine Kopie an mich senden',
    subjectLabel: 'Betreff',
    subjectPlaceholder: 'Betreff Ihrer Nachricht',
    subjectRequired: 'Betreff ist erforderlich',
    successTitle: 'Nachricht gesendet!',
    successMessage: 'Vielen Dank für Ihre Nachricht. Wir werden uns in Kürze bei Ihnen melden.',
    errorTitle: 'Fehler beim Senden',
    errorNetwork: 'Netzwerkfehler. Bitte überprüfen Sie Ihre Internetverbindung.',
    errorValidation: 'Bitte überprüfen Sie Ihre Eingaben.',
    errorServer: 'Serverfehler. Bitte versuchen Sie es später erneut.',
    errorUnknown: 'Ein unbekannter Fehler ist aufgetreten.',
    errorTurnstile: 'Sicherheitsüberprüfung fehlgeschlagen. Bitte versuchen Sie es erneut.',
    tryAgain: 'Erneut versuchen',
    closeButton: 'Schließen',
    loadingTurnstile: 'Lade Sicherheitsüberprüfung...'
  },
  en: {
    nameLabel: 'Name',
    namePlaceholder: 'Your name',
    nameRequired: 'Name is required',
    nameInvalid: 'Name must be between 2 and 100 characters',
    emailLabel: 'Email',
    emailPlaceholder: 'your@email.com',
    emailRequired: 'Email is required',
    emailInvalid: 'Please enter a valid email address',
    phoneLabel: 'Phone (optional)',
    phonePlaceholder: '+1 234 567 8900',
    phoneInvalid: 'Please enter a valid phone number',
    messageLabel: 'Message',
    messagePlaceholder: 'Tell us about your project...',
    messageRequired: 'Message is required',
    messageTooShort: 'Message must be at least 10 characters',
    submitButton: 'Send Message',
    submitting: 'Sending...',
    sendCopyLabel: 'Send me a copy',
    subjectLabel: 'Subject',
    subjectPlaceholder: 'Subject of your message',
    subjectRequired: 'Subject is required',
    successTitle: 'Message Sent!',
    successMessage: 'Thank you for your message. We will get back to you soon.',
    errorTitle: 'Failed to Send',
    errorNetwork: 'Network error. Please check your internet connection.',
    errorValidation: 'Please check your input.',
    errorServer: 'Server error. Please try again later.',
    errorUnknown: 'An unknown error occurred.',
    errorTurnstile: 'Security verification failed. Please try again.',
    tryAgain: 'Try Again',
    closeButton: 'Close',
    loadingTurnstile: 'Loading security check...'
  }
};

const t = translations[lang];
const siteKey = import.meta.env.PUBLIC_TURNSTILE_SITE_KEY || '1x00000000000000000000AA';
---

<div 
  x-data="contactForm()"
  class="w-full max-w-2xl mx-auto"
>
  <form 
    @submit.prevent="handleSubmit"
    class="space-y-6"
  >
    <!-- Name Field -->
    <div>
      <label for="name" class="block text-sm font-medium text-gray-700 mb-1">
        {t.nameLabel} <span class="text-red-500">*</span>
      </label>
      <input
        type="text"
        id="name"
        x-model="formData.name"
        @blur="validateField('name')"
        :class="{'border-red-500': errors.name && touched.name}"
        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-gold focus:border-transparent transition-colors"
        placeholder={t.namePlaceholder}
      />
      <p x-show="errors.name && touched.name" x-text="errors.name" class="mt-1 text-sm text-red-500"></p>
    </div>

    <!-- Email Field -->
    <div>
      <label for="email" class="block text-sm font-medium text-gray-700 mb-1">
        {t.emailLabel} <span class="text-red-500">*</span>
      </label>
      <input
        type="email"
        id="email"
        x-model="formData.email"
        @blur="validateField('email')"
        :class="{'border-red-500': errors.email && touched.email}"
        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-gold focus:border-transparent transition-colors"
        placeholder={t.emailPlaceholder}
      />
      <p x-show="errors.email && touched.email" x-text="errors.email" class="mt-1 text-sm text-red-500"></p>
    </div>

    <!-- Phone Field (Optional) -->
    <div>
      <label for="phone" class="block text-sm font-medium text-gray-700 mb-1">
        {t.phoneLabel}
      </label>
      <input
        type="tel"
        id="phone"
        x-model="formData.phone"
        @blur="validateField('phone')"
        :class="{'border-red-500': errors.phone && touched.phone}"
        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-gold focus:border-transparent transition-colors"
        placeholder={t.phonePlaceholder}
      />
      <p x-show="errors.phone && touched.phone" x-text="errors.phone" class="mt-1 text-sm text-red-500"></p>
    </div>

    <!-- Subject Field -->
    <div>
      <label for="subject" class="block text-sm font-medium text-gray-700 mb-1">
        {t.subjectLabel} <span class="text-red-500">*</span>
      </label>
      <input
        type="text"
        id="subject"
        x-model="formData.subject"
        @blur="validateField('subject')"
        :class="{'border-red-500': errors.subject && touched.subject}"
        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-gold focus:border-transparent transition-colors"
        placeholder={t.subjectPlaceholder}
      />
      <p x-show="errors.subject && touched.subject" x-text="errors.subject" class="mt-1 text-sm text-red-500"></p>
    </div>

    <!-- Message Field -->
    <div>
      <label for="message" class="block text-sm font-medium text-gray-700 mb-1">
        {t.messageLabel} <span class="text-red-500">*</span>
      </label>
      <textarea
        id="message"
        x-model="formData.message"
        @blur="validateField('message')"
        :class="{'border-red-500': errors.message && touched.message}"
        rows="6"
        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-gold focus:border-transparent transition-colors resize-none"
        placeholder={t.messagePlaceholder}
      ></textarea>
      <p x-show="errors.message && touched.message" x-text="errors.message" class="mt-1 text-sm text-red-500"></p>
    </div>

    <!-- Send Copy Checkbox -->
    <div class="flex items-center">
      <input
        type="checkbox"
        id="sendCopy"
        x-model="formData.sendCopy"
        class="h-4 w-4 text-gold focus:ring-gold border-gray-300 rounded"
      />
      <label for="sendCopy" class="ml-2 text-sm text-gray-700">
        {t.sendCopyLabel}
      </label>
    </div>

    <!-- Turnstile Widget Container -->
    <div id="turnstile-widget" class="min-h-[65px]"></div>

    <!-- Submit Button -->
    <button
      type="submit"
      :disabled="isSubmitting"
      class="w-full px-6 py-3 bg-gold text-white font-medium rounded-lg hover:bg-gold-dark transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
    >
      <span x-show="!isSubmitting">{t.submitButton}</span>
      <span x-show="isSubmitting" class="flex items-center justify-center">
        <svg class="animate-spin h-5 w-5 mr-3" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        {t.submitting}
      </span>
    </button>
  </form>

  <!-- Success Message -->
  <div 
    x-show="submitStatus === 'success'"
    x-transition:enter="transition ease-out duration-300"
    x-transition:enter-start="opacity-0 transform scale-90"
    x-transition:enter-end="opacity-100 transform scale-100"
    class="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black bg-opacity-50"
  >
    <div class="bg-white rounded-lg p-6 max-w-md w-full">
      <div class="flex items-center mb-4">
        <svg class="w-8 h-8 text-green-500 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        <h3 class="text-lg font-semibold">{t.successTitle}</h3>
      </div>
      <p class="text-gray-600 mb-4">{t.successMessage}</p>
      <button 
        @click="submitStatus = 'idle'"
        class="w-full px-4 py-2 bg-gold text-white rounded-lg hover:bg-gold-dark transition-colors"
      >
        {t.closeButton}
      </button>
    </div>
  </div>

  <!-- Error Message -->
  <div 
    x-show="submitStatus === 'error'"
    x-transition:enter="transition ease-out duration-300"
    x-transition:enter-start="opacity-0 transform scale-90"
    x-transition:enter-end="opacity-100 transform scale-100"
    class="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black bg-opacity-50"
  >
    <div class="bg-white rounded-lg p-6 max-w-md w-full">
      <div class="flex items-center mb-4">
        <svg class="w-8 h-8 text-red-500 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        <h3 class="text-lg font-semibold">{t.errorTitle}</h3>
      </div>
      <p class="text-gray-600 mb-4" x-text="errorMessage"></p>
      <button 
        @click="submitStatus = 'idle'"
        class="w-full px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors"
      >
        {t.tryAgain}
      </button>
    </div>
  </div>
</div>

<script define:vars={{ t, siteKey, lang }}>
  function contactForm() {
    return {
      formData: {
        name: '',
        email: '',
        phone: '',
        subject: '',
        message: '',
        sendCopy: true
      },
      errors: {},
      touched: {},
      isSubmitting: false,
      submitStatus: 'idle',
      errorMessage: '',
      turnstileToken: null,
      turnstileWidgetId: null,
      
      init() {
        // Load form data from localStorage
        const saved = localStorage.getItem('phialo-contact-form');
        if (saved) {
          try {
            this.formData = { ...this.formData, ...JSON.parse(saved) };
          } catch (e) {
            console.error('Failed to load saved form data:', e);
          }
        }
        
        // Save form data on change
        this.$watch('formData', (value) => {
          localStorage.setItem('phialo-contact-form', JSON.stringify(value));
        });
        
        // Initialize Turnstile when ready
        this.initTurnstile();
      },
      
      initTurnstile() {
        // Check if Turnstile is loaded
        const checkTurnstile = () => {
          if (window.turnstile) {
            try {
              this.turnstileWidgetId = window.turnstile.render('#turnstile-widget', {
                sitekey: siteKey,
                callback: (token) => {
                  this.turnstileToken = token;
                },
                'error-callback': () => {
                  this.errorMessage = t.errorTurnstile;
                },
                theme: 'light',
                language: lang === 'en' ? 'en' : 'de'
              });
            } catch (e) {
              console.error('Failed to render Turnstile:', e);
            }
          } else {
            // Retry after a short delay
            setTimeout(checkTurnstile, 100);
          }
        };
        
        checkTurnstile();
      },
      
      validateField(field) {
        this.touched[field] = true;
        const v = this.formData[field];
        const rules = {
          name: () => !v ? t.nameRequired : (v.length < 2 || v.length > 100) ? t.nameInvalid : null,
          email: () => !v ? t.emailRequired : !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(v) ? t.emailInvalid : null,
          phone: () => v && !/^[\d\s\-\+\(\)]+$/.test(v) ? t.phoneInvalid : null,
          subject: () => !v ? t.subjectRequired : null,
          message: () => !v ? t.messageRequired : v.length < 10 ? t.messageTooShort : null
        };
        const error = rules[field] ? rules[field]() : null;
        error ? this.errors[field] = error : delete this.errors[field];
      },
      
      validateForm() {
        // Validate all fields
        ['name', 'email', 'phone', 'subject', 'message'].forEach(field => {
          this.validateField(field);
          this.touched[field] = true;
        });
        
        return Object.keys(this.errors).length === 0;
      },
      
      async handleSubmit() {
        if (!this.validateForm()) {
          this.errorMessage = t.errorValidation;
          return;
        }
        
        // Check for Turnstile token
        if (!this.turnstileToken) {
          // Try to get token from widget
          if (window.turnstile && this.turnstileWidgetId !== null) {
            this.turnstileToken = window.turnstile.getResponse(this.turnstileWidgetId);
          }
          
          if (!this.turnstileToken) {
            this.errorMessage = t.errorTurnstile;
            this.submitStatus = 'error';
            return;
          }
        }
        
        this.isSubmitting = true;
        this.submitStatus = 'idle';
        
        try {
          const response = await fetch('/api/contact', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              ...this.formData,
              language: lang,
              turnstileToken: this.turnstileToken
            })
          });
          
          const result = await response.json();
          
          if (response.ok && result.success) {
            this.submitStatus = 'success';
            // Clear form
            this.formData = {
              name: '',
              email: '',
              phone: '',
              subject: '',
              message: '',
              sendCopy: true
            };
            this.errors = {};
            this.touched = {};
            localStorage.removeItem('phialo-contact-form');
            
            // Reset Turnstile
            if (window.turnstile && this.turnstileWidgetId !== null) {
              window.turnstile.reset(this.turnstileWidgetId);
            }
            this.turnstileToken = null;
          } else {
            throw new Error(result.error || t.errorUnknown);
          }
        } catch (error) {
          console.error('Form submission error:', error);
          if (error.message.includes('network')) {
            this.errorMessage = t.errorNetwork;
          } else if (error.message.includes('validation')) {
            this.errorMessage = t.errorValidation;
          } else if (error.message.includes('server')) {
            this.errorMessage = t.errorServer;
          } else {
            this.errorMessage = error.message || t.errorUnknown;
          }
          this.submitStatus = 'error';
          
          // Reset Turnstile on error
          if (window.turnstile && this.turnstileWidgetId !== null) {
            window.turnstile.reset(this.turnstileWidgetId);
          }
          this.turnstileToken = null;
        } finally {
          this.isSubmitting = false;
        }
      }
    };
  }
</script>

<!-- Load Turnstile script -->
<script src="https://challenges.cloudflare.com/turnstile/v0/api.js" async defer></script>