---
import Button from '../common/Button.astro';

const tutorials = [
  {
    id: 1,
    title: 'Gemstone Authentication',
    description: 'Learn to identify authentic gemstones and understand quality certificates.',
    image: '/images/tutorials/gemstone-auth.jpg',
    duration: '15 min read',
    category: 'Education',
    featured: true,
  },
  {
    id: 2,
    title: 'Jewelry Care Guide',
    description: 'Essential tips for maintaining your precious jewelry collection.',
    image: '/images/tutorials/jewelry-care.jpg',
    duration: '10 min read',
    category: 'Care',
    featured: false,
  },
  {
    id: 3,
    title: 'Investment in Gems',
    description: 'Understanding gemstone investment potential and market trends.',
    image: '/images/tutorials/gem-investment.jpg',
    duration: '20 min read',
    category: 'Investment',
    featured: true,
  },
  {
    id: 4,
    title: 'Custom Design Process',
    description: 'Behind the scenes of creating bespoke jewelry pieces.',
    image: '/images/tutorials/custom-design.jpg',
    duration: '12 min read',
    category: 'Design',
    featured: false,
  },
];
---

<section class="py-20 bg-neutral-50">
  <div class="container mx-auto px-6">
    <!-- Section Header -->
    <div class="text-center mb-16">
      <h2 class="text-4xl md:text-5xl font-light text-neutral-900 mb-6">
        Learn & Explore
      </h2>
      <p class="text-lg text-neutral-600 max-w-2xl mx-auto">
        Discover the fascinating world of gemstones and jewelry through our expert guides and insights.
      </p>
    </div>

    <!-- Horizontal Scroll Container -->
    <div class="relative">
      <div 
        class="flex gap-8 overflow-x-auto scrollbar-hide pb-6 snap-x snap-mandatory"
        style="scroll-padding-left: 1.5rem;"
      >
        {tutorials.map((tutorial) => (
          <article 
            class="flex-none w-80 bg-white rounded-2xl overflow-hidden shadow-sm hover:shadow-lg transition-all duration-300 snap-start tutorial-card"
            data-tutorial-id={tutorial.id}
          >
            <!-- Image -->
            <div class="relative h-48 bg-neutral-200">
              <img 
                src={tutorial.image} 
                alt={tutorial.title}
                class="w-full h-full object-cover transition-transform duration-500 hover:scale-105"
                loading="lazy"
              />
              {tutorial.featured && (
                <div class="absolute top-4 left-4">
                  <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-primary-600 text-white">
                    Featured
                  </span>
                </div>
              )}
              <div class="absolute top-4 right-4">
                <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-white/90 text-neutral-700">
                  {tutorial.duration}
                </span>
              </div>
            </div>

            <!-- Content -->
            <div class="p-6">
              <div class="flex items-center justify-between mb-3">
                <span class="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium bg-neutral-100 text-neutral-700">
                  {tutorial.category}
                </span>
              </div>
              
              <h3 class="text-xl font-semibold text-neutral-900 mb-3 line-clamp-2">
                {tutorial.title}
              </h3>
              
              <p class="text-neutral-600 mb-6 line-clamp-3">
                {tutorial.description}
              </p>

              <a 
                href={`/tutorials/${tutorial.id}`}
                class="inline-flex items-center text-primary-600 hover:text-primary-700 font-medium transition-colors group"
              >
                Read Tutorial
                <svg 
                  class="ml-2 w-4 h-4 transition-transform group-hover:translate-x-1" 
                  fill="none" 
                  stroke="currentColor" 
                  viewBox="0 0 24 24"
                >
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </a>
            </div>
          </article>
        ))}
      </div>

      <!-- Scroll Indicators -->
      <div class="flex justify-center mt-8 gap-2">
        {tutorials.map((_, index) => (
          <button
            class="w-2 h-2 rounded-full bg-neutral-300 transition-all duration-300 scroll-indicator"
            data-index={index}
            aria-label={`Go to tutorial ${index + 1}`}
          ></button>
        ))}
      </div>
    </div>

    <!-- CTA Section -->
    <div class="text-center mt-16">
      <Button 
        href="/tutorials" 
        variant="outline" 
        size="lg"
        class="mx-auto"
      >
        View All Tutorials
      </Button>
    </div>
  </div>
</section>

<style>
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }

  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>

<script>
  // Scroll indicator functionality
  function initTutorialScrollIndicators() {
    const scrollContainer = document.querySelector('.flex.gap-8.overflow-x-auto');
    const indicators = document.querySelectorAll('.scroll-indicator');
    
    if (!scrollContainer || !indicators.length) return;

    function updateIndicators() {
      const scrollLeft = scrollContainer.scrollLeft;
      const cardWidth = 320 + 32; // card width + gap
      const activeIndex = Math.round(scrollLeft / cardWidth);
      
      indicators.forEach((indicator, index) => {
        if (index === activeIndex) {
          indicator.classList.add('bg-primary-600');
          indicator.classList.remove('bg-neutral-300');
        } else {
          indicator.classList.remove('bg-primary-600');
          indicator.classList.add('bg-neutral-300');
        }
      });
    }

    function scrollToCard(index: number) {
      const cardWidth = 320 + 32; // card width + gap
      const scrollLeft = index * cardWidth;
      scrollContainer.scrollTo({
        left: scrollLeft,
        behavior: 'smooth'
      });
    }

    // Add click handlers to indicators
    indicators.forEach((indicator, index) => {
      indicator.addEventListener('click', () => scrollToCard(index));
    });

    // Update indicators on scroll
    scrollContainer.addEventListener('scroll', updateIndicators);
    
    // Initialize
    updateIndicators();
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', initTutorialScrollIndicators);
</script>
