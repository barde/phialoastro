---
import { SEO } from "astro-seo";
import { ClientRouter } from "astro:transitions";
import SmoothScroll from '../components/effects/SmoothScroll';
import CriticalCSS from './CriticalCSS.astro';
import WebVitalsMonitor from '../components/performance/WebVitalsMonitor.astro';
import ServiceWorkerRegistration from '../components/ServiceWorkerRegistration.astro';
import FontLoader from '../components/FontLoader.astro';
// Import CSS files - they will be automatically optimized by Astro
import '../../styles/fonts.css';
import '../../styles/global.css';

export interface Props {
  title: string;
  description?: string;
  image?: string;
  noindex?: boolean;
  lang?: string;
}

// First destructure props to get lang
const {
  title,
  image = "/social/og-default.jpg",
  noindex = false,
  lang = "de"
} = Astro.props;

// Get Cloudflare Analytics token from environment variable
const analyticsToken = import.meta.env.PUBLIC_CLOUDFLARE_ANALYTICS_TOKEN;

// Default descriptions based on language - now lang is available
const defaultDescriptions = {
  de: "Phialo Design - Wo Schmuck auf Innovation trifft. 3D Design, individuelle Kreationen und Expertise in der Schmuckherstellung.",
  en: "Phialo Design - Where jewelry meets innovation. 3D design, individual creations and expertise in jewelry manufacturing."
};

// Set description with fallback
const description = Astro.props.description || defaultDescriptions[lang as keyof typeof defaultDescriptions] || defaultDescriptions.de;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const socialImageURL = new URL(image, Astro.url).href;

// Generate alternate language URLs for hreflang
const currentPath = Astro.url.pathname;
const isEnglish = currentPath.startsWith('/en/');
const basePath = isEnglish ? currentPath.replace(/^\/en/, '') || '/' : currentPath;
const germanUrl = new URL(basePath, Astro.site).href;
const englishUrl = new URL('/en' + basePath, Astro.site).href;
---

<!DOCTYPE html>
<html lang={lang} class="scroll-smooth">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Resource hints for optimal performance -->
    <!-- DNS Prefetch for external domains -->
    <link rel="dns-prefetch" href="https://static.cloudflareinsights.com" />
    <link rel="dns-prefetch" href="https://cdn.cloudflare.com" />
    
    <!-- Preconnect for critical third-party origins -->
    <link rel="preconnect" href="https://static.cloudflareinsights.com" crossorigin />
    
    <!-- Preload critical fonts with high priority for immediate text rendering -->
    <link rel="preload" href="/fonts/inter-400-latin.woff2" as="font" type="font/woff2" crossorigin="anonymous" fetchpriority="high" />
    <link rel="preload" href="/fonts/playfair-700-latin.woff2" as="font" type="font/woff2" crossorigin="anonymous" fetchpriority="high" />
    
    <!-- Inline critical font CSS to prevent render-blocking -->
    <style>
      /* Critical fonts for immediate rendering */
      @font-face {
        font-family: 'Inter';
        font-style: normal;
        font-weight: 400;
        font-display: swap; /* Use swap for critical fonts to show text immediately */
        src: url('/fonts/inter-400-latin.woff2') format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }
      
      @font-face {
        font-family: 'Playfair Display';
        font-style: normal;
        font-weight: 700;
        font-display: swap; /* Use swap for critical fonts to show text immediately */
        src: url('/fonts/playfair-700-latin.woff2') format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }
      
      /* Font loading optimization class */
      .fonts-loaded {
        font-synthesis: none;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
      }
    </style>
    
    <!-- Prefetch likely next navigation -->
    {(Astro.url.pathname === '/' || Astro.url.pathname === '/en/') && (
      <>
        <link rel="prefetch" href="/portfolio" />
        <link rel="prefetch" href="/services" />
      </>
    )}
    
    <!-- Prerender critical pages for instant navigation -->
    <link rel="prerender" href="/portfolio" />
    
    <!-- Page-specific resource hints -->
    {Astro.url.pathname === '/' || Astro.url.pathname === '/en/' ? (
      <>
        <!-- Preload hero image for homepage -->
        <link rel="preload" as="image" href="/images/hero-bg.webp" type="image/webp" fetchpriority="high" />
      </>
    ) : (Astro.url.pathname === '/portfolio/' || Astro.url.pathname === '/en/portfolio/') ? (
      <>
        <!-- Preload first visible portfolio images in WebP format -->
        <link rel="preload" as="image" href="/images/portfolio/winged-ring-1-800w.webp" type="image/webp" fetchpriority="high" />
        <link rel="preload" as="image" href="/images/portfolio/dna_spirale_freigestellt_refl-800w.webp" type="image/webp" fetchpriority="high" />
        <link rel="preload" as="image" href="/images/portfolio/turmalinring_refl-800w.webp" type="image/webp" fetchpriority="high" />
        <!-- Prefetch additional portfolio images -->
        <link rel="prefetch" as="image" href="/images/portfolio/pearl-ring-800w.webp" type="image/webp" />
        <link rel="prefetch" as="image" href="/images/portfolio/spiral-bracelet-800w.webp" type="image/webp" />
      </>
    ) : null}
    
    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <link rel="manifest" href="/manifest.json" />
    
    <!-- Inline critical CSS for faster initial render -->
    <CriticalCSS />
    
    <!-- CSS is automatically handled by Astro's build process -->
    
    <SEO
      title={title}
      description={description}
      canonical={canonicalURL}
      noindex={noindex}
      openGraph={{
        basic: {
          title: title,
          type: "website",
          image: socialImageURL,
        },
        optional: {
          description: description,
          siteName: "Phialo Design",
        },
      }}
      twitter={{
        creator: "@phialodesign",
        site: "@phialodesign",
        card: "summary_large_image",
      }}
      extend={{
        link: [
          { rel: "icon", href: "/favicon.ico" },
          { rel: "apple-touch-icon", sizes: "180x180", href: "/apple-touch-icon.png" },
          { rel: "alternate", hreflang: "de", href: germanUrl },
          { rel: "alternate", hreflang: "en", href: englishUrl },
          { rel: "alternate", hreflang: "x-default", href: germanUrl }
        ],
        meta: [
          { name: "twitter:image", content: socialImageURL },
          { name: "twitter:title", content: title },
          { name: "twitter:description", content: description },
          { name: "theme-color", content: "#0A192F" },
        ],
      }}
    />
    
    <ClientRouter />
  </head>
  <body class="min-h-screen antialiased">
    <!-- Load interactive components with lower priority -->
    <SmoothScroll client:idle />
    <slot />
    
    <!-- Font Loading Optimization -->
    <FontLoader />
    
    <!-- Core Web Vitals Monitoring with Attribution -->
    <WebVitalsMonitor />
    
    <!-- Service Worker Registration -->
    <ServiceWorkerRegistration />
    
    <!-- Cloudflare Web Analytics - Using Partytown to run in web worker -->
    {analyticsToken && (
      <script 
        type="text/partytown"
        src='https://static.cloudflareinsights.com/beacon.min.js' 
        data-cf-beacon={JSON.stringify({ token: analyticsToken })}>
      </script>
    )}
    
    <!-- Deferred performance optimizations -->
    <script defer>
      // Preload important resources on interaction
      const preloadOnHover = () => {
        const links = document.querySelectorAll('a[href^="/"]');
        links.forEach(link => {
          link.addEventListener('mouseenter', () => {
            const href = link.getAttribute('href');
            if (href && !document.querySelector(`link[rel="prefetch"][href="${href}"]`)) {
              const prefetchLink = document.createElement('link');
              prefetchLink.rel = 'prefetch';
              prefetchLink.href = href;
              document.head.appendChild(prefetchLink);
            }
          }, { once: true, passive: true });
        });
      };
      
      // Use requestIdleCallback for non-critical initialization
      if ('requestIdleCallback' in window) {
        requestIdleCallback(preloadOnHover);
      } else {
        setTimeout(preloadOnHover, 1);
      }
    </script>
  </body>
</html>
