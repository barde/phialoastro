---
// Service Worker Registration Component
// This component handles service worker registration and update notifications
---

<script>
  class ServiceWorkerManager {
    private registration: ServiceWorkerRegistration | null = null;
    private updateAvailable = false;
    
    constructor() {
      this.init();
    }
    
    async init() {
      // Check if service worker is supported
      if (!('serviceWorker' in navigator)) {
        console.log('[SW] Service Workers not supported');
        return;
      }
      
      // Only register in production or preview environments
      const isLocalhost = window.location.hostname === 'localhost' || 
                         window.location.hostname === '127.0.0.1';
      const isPreview = window.location.hostname.includes('workers.dev');
      const isProduction = window.location.hostname === 'phialo.de';
      
      if (!isLocalhost && !isPreview && !isProduction) {
        console.log('[SW] Service Worker registration skipped for this environment');
        return;
      }
      
      try {
        // Register service worker
        this.registration = await navigator.serviceWorker.register('/sw.js', {
          scope: '/',
          updateViaCache: 'none'
        });
        
        console.log('[SW] Registered successfully:', this.registration);
        
        // Check for updates immediately
        this.registration.update();
        
        // Check for updates periodically (every hour)
        setInterval(() => {
          this.registration?.update();
        }, 60 * 60 * 1000);
        
        // Handle update events
        this.registration.addEventListener('updatefound', () => {
          this.handleUpdateFound();
        });
        
        // Handle controller changes
        navigator.serviceWorker.addEventListener('controllerchange', () => {
          this.handleControllerChange();
        });
        
        // Listen for messages from service worker
        navigator.serviceWorker.addEventListener('message', (event) => {
          this.handleSWMessage(event);
        });
        
        // Monitor online/offline status
        window.addEventListener('online', () => this.handleOnline());
        window.addEventListener('offline', () => this.handleOffline());
        
      } catch (error) {
        console.error('[SW] Registration failed:', error);
      }
    }
    
    handleUpdateFound() {
      const newWorker = this.registration?.installing;
      if (!newWorker) return;
      
      console.log('[SW] Update found, new version installing');
      
      newWorker.addEventListener('statechange', () => {
        if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
          // New version is installed and ready
          this.updateAvailable = true;
          this.showUpdateNotification();
        }
      });
    }
    
    handleControllerChange() {
      // Service worker has been updated
      console.log('[SW] Controller changed, reloading page');
      window.location.reload();
    }
    
    handleSWMessage(event: MessageEvent) {
      console.log('[SW] Message received:', event.data);
      
      if (event.data?.type === 'CACHE_UPDATED') {
        console.log('[SW] Cache updated:', event.data.url);
      }
    }
    
    showUpdateNotification() {
      // Create update notification element
      const notification = document.createElement('div');
      notification.className = 'fixed bottom-4 right-4 bg-primary-600 text-white p-4 rounded-lg shadow-lg z-50 flex items-center gap-4 animate-slide-up';
      notification.innerHTML = `
        <div class="flex-1">
          <p class="font-semibold">Update verf체gbar / Update available</p>
          <p class="text-sm opacity-90">Eine neue Version der Website ist verf체gbar / A new version is available</p>
        </div>
        <button 
          id="update-sw-btn"
          class="px-4 py-2 bg-white text-primary-600 rounded hover:bg-gray-100 transition-colors font-medium"
        >
          Aktualisieren / Update
        </button>
        <button 
          id="dismiss-sw-btn"
          class="text-white hover:opacity-70"
          aria-label="Dismiss"
        >
          <svg width="20" height="20" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
          </svg>
        </button>
      `;
      
      document.body.appendChild(notification);
      
      // Handle update button click
      document.getElementById('update-sw-btn')?.addEventListener('click', () => {
        this.applyUpdate();
      });
      
      // Handle dismiss button click
      document.getElementById('dismiss-sw-btn')?.addEventListener('click', () => {
        notification.remove();
      });
      
      // Auto-hide after 30 seconds
      setTimeout(() => {
        notification.remove();
      }, 30000);
    }
    
    async applyUpdate() {
      if (!this.registration?.waiting) return;
      
      // Tell the waiting service worker to take control
      this.registration.waiting.postMessage({ type: 'SKIP_WAITING' });
    }
    
    handleOnline() {
      console.log('[SW] Application is online');
      
      // Remove offline indicator if exists
      const indicator = document.getElementById('offline-indicator');
      if (indicator) {
        indicator.remove();
      }
    }
    
    handleOffline() {
      console.log('[SW] Application is offline');
      
      // Show offline indicator
      const indicator = document.createElement('div');
      indicator.id = 'offline-indicator';
      indicator.className = 'fixed top-0 left-0 right-0 bg-yellow-500 text-black text-center py-2 z-50';
      indicator.innerHTML = `
        <p class="text-sm font-medium">
          Offline-Modus / Offline Mode - 
          <span class="opacity-90">Eingeschr채nkte Funktionalit채t / Limited functionality</span>
        </p>
      `;
      
      document.body.appendChild(indicator);
    }
    
    // Prefetch URLs for offline availability
    async prefetchUrls(urls: string[]) {
      if (!navigator.serviceWorker.controller) return;
      
      navigator.serviceWorker.controller.postMessage({
        type: 'CACHE_URLS',
        urls: urls
      });
    }
  }
  
  // Initialize service worker manager when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      (window as any).swManager = new ServiceWorkerManager();
    });
  } else {
    (window as any).swManager = new ServiceWorkerManager();
  }
</script>

<style>
  @keyframes slide-up {
    from {
      transform: translateY(100%);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }
  
  .animate-slide-up {
    animation: slide-up 0.3s ease-out;
  }
</style>