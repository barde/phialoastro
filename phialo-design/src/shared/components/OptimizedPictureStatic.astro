---
interface Props {
  src: string;
  alt: string;
  className?: string;
  loading?: 'lazy' | 'eager';
  fetchPriority?: 'high' | 'low' | 'auto';
  width?: number;
  height?: number;
}

const {
  src,
  alt,
  className = '',
  loading = 'lazy',
  fetchPriority,
  width = 800,
  height = 1000,
} = Astro.props;

// Extract filename without extension
const filename = src.split('/').pop()?.replace(/\.[^/.]+$/, '') || '';
const basePath = src.substring(0, src.lastIndexOf('/'));

// Sizes for responsive images - more accurate for portfolio grid
const sizes = '(max-width: 640px) 100vw, (max-width: 768px) 50vw, (max-width: 1024px) 33vw, (max-width: 1280px) 25vw, 320px';

// Generate srcset for different formats
const generateSrcSet = (ext: string, includeLarge: boolean = true) => {
  const imageSizes = includeLarge 
    ? [320, 400, 640, 800, 1024, 1200, 1600, 2000]
    : [320, 400, 640, 800];
  
  // AVIF is only generated for sizes >= 800px to save build time
  const filteredSizes = ext === 'avif' ? imageSizes.filter(s => s >= 800) : imageSizes;
  
  return filteredSizes
    .map(size => `${basePath}/${filename}-${size}w.${ext} ${size}w`)
    .join(', ');
};

// Check if we have modern formats available
const hasModernFormats = !src.includes('http') || src.includes('phialo');
---

<picture>
  {/* AVIF for browsers that support it (best compression) */}
  {hasModernFormats && (
    <source
      srcset={generateSrcSet('avif', false)}
      sizes={sizes}
      type="image/avif"
    />
  )}
  
  {/* WebP for broader support */}
  {hasModernFormats && (
    <source
      srcset={generateSrcSet('webp')}
      sizes={sizes}
      type="image/webp"
    />
  )}
  
  {/* Fallback to JPEG */}
  <source
    srcset={`${src} 1600w, ${basePath}/${filename}.jpg 1600w`}
    sizes={sizes}
    type="image/jpeg"
  />
  
  {/* Fallback img element */}
  <img
    src={src}
    alt={alt}
    class={className}
    loading={loading}
    fetchpriority={fetchPriority}
    width={width}
    height={height}
    decoding={loading === 'eager' ? 'sync' : 'async'}
    sizes={sizes}
  />
</picture>