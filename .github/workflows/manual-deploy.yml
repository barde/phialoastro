name: Manual Cloudflare Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'preview'
        type: choice
        options:
          - preview
          - production
      branch:
        description: 'Branch to deploy (leave empty for current branch)'
        required: false
        type: string
      skip_tests:
        description: 'Skip tests before deployment'
        required: false
        default: false
        type: boolean
      debug:
        description: 'Enable debug logging'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  deployments: write

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      deploy_branch: ${{ steps.check.outputs.deploy_branch }}
    steps:
      - name: Validate deployment request
        id: check
        run: |
          # Determine branch to deploy
          if [ -n "${{ github.event.inputs.branch }}" ]; then
            DEPLOY_BRANCH="${{ github.event.inputs.branch }}"
          else
            DEPLOY_BRANCH="${{ github.ref_name }}"
          fi
          
          echo "deploy_branch=$DEPLOY_BRANCH" >> $GITHUB_OUTPUT
          
          # Production deployments require explicit confirmation
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            if [ "$DEPLOY_BRANCH" != "master" ] && [ "$DEPLOY_BRANCH" != "main" ]; then
              echo "‚ö†Ô∏è  WARNING: Attempting to deploy non-master branch to production!"
              echo "Branch: $DEPLOY_BRANCH"
              echo "This requires manual approval in the next step."
            fi
          fi
          
          echo "should_deploy=true" >> $GITHUB_OUTPUT
          
      - name: Log deployment info
        run: |
          echo "üìã Deployment Request Summary"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Branch: ${{ steps.check.outputs.deploy_branch }}"
          echo "Skip Tests: ${{ github.event.inputs.skip_tests }}"
          echo "Debug Mode: ${{ github.event.inputs.debug }}"
          echo "Triggered by: ${{ github.actor }}"

  test:
    needs: validate
    if: needs.validate.outputs.should_deploy == 'true' && github.event.inputs.skip_tests != 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate.outputs.deploy_branch }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'phialo-design/package-lock.json'
      
      - name: Install dependencies
        working-directory: ./phialo-design
        run: npm ci
      
      - name: Run type checking
        working-directory: ./phialo-design
        run: npm run typecheck
      
      - name: Run linting
        working-directory: ./phialo-design
        run: npm run lint
      
      - name: Run unit tests
        working-directory: ./phialo-design
        run: npm run test:run

  deploy:
    needs: [validate, test]
    if: |
      always() && 
      needs.validate.outputs.should_deploy == 'true' &&
      (needs.test.result == 'success' || github.event.inputs.skip_tests == 'true')
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate.outputs.deploy_branch }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'phialo-design/package-lock.json'
      
      - name: Install dependencies
        working-directory: ./phialo-design
        run: npm ci
      
      - name: Install worker dependencies
        working-directory: ./workers
        run: npm ci
      
      - name: Build Astro site
        working-directory: ./phialo-design
        run: npm run build
        env:
          DEBUG: ${{ github.event.inputs.debug }}
      
      - name: Deploy to Cloudflare Workers
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: 'workers'
          command: deploy --env ${{ github.event.inputs.environment }}
          secrets: |
            WEB3FORMS_ACCESS_KEY
            RESEND_API_KEY
            FROM_EMAIL
            TO_EMAIL
        env:
          WEB3FORMS_ACCESS_KEY: ${{ secrets.WEB3FORMS_ACCESS_KEY }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
          TO_EMAIL: ${{ secrets.TO_EMAIL }}
      
      - name: Get deployment URL
        id: url
        run: |
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            echo "deployment_url=https://phialo.de" >> $GITHUB_OUTPUT
          else
            echo "deployment_url=https://phialo-design-preview.meise.workers.dev" >> $GITHUB_OUTPUT
          fi
      
      - name: Create deployment record
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: '${{ needs.validate.outputs.deploy_branch }}',
              environment: '${{ github.event.inputs.environment }}',
              required_contexts: [],
              auto_merge: false,
              production_environment: ${{ github.event.inputs.environment == 'production' }}
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: '${{ steps.url.outputs.deployment_url }}',
              description: 'Deployment completed successfully'
            });
      
      - name: Post deployment summary
        run: |
          echo "## üöÄ Deployment Complete!"
          echo ""
          echo "**Environment**: ${{ github.event.inputs.environment }}"
          echo "**URL**: ${{ steps.url.outputs.deployment_url }}"
          echo "**Branch**: ${{ needs.validate.outputs.deploy_branch }}"
          echo "**Deployed by**: ${{ github.actor }}"
          echo "**Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          echo "### Next Steps"
          if [ "${{ github.event.inputs.environment }}" = "preview" ]; then
            echo "- Test your changes at the preview URL"
            echo "- If everything looks good, deploy to production"
          else
            echo "- Monitor the production site for any issues"
            echo "- Check Cloudflare analytics for performance metrics"
          fi

  notify-failure:
    needs: [validate, test, deploy]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Notify deployment failure
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_comment = `
            ## ‚ùå Manual Deployment Failed
            
            **Environment**: ${{ github.event.inputs.environment }}
            **Branch**: ${{ needs.validate.outputs.deploy_branch }}
            **Triggered by**: ${{ github.actor }}
            
            Please check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.
            `;
            
            // If this was triggered from a PR context, comment on the PR
            if (context.issue.number) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: issue_comment
              });
            }