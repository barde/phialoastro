name: Manual Cloudflare Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - preview
      branch:
        description: 'Branch to deploy'
        required: false
        default: 'master'
        type: string
      skip_tests:
        description: 'Skip tests before deployment'
        required: false
        default: false
        type: boolean
      debug:
        description: 'Enable debug logging'
        required: false
        default: false
        type: boolean

permissions:
  contents: write  # Changed from 'read' to allow tag creation for production deployments
  deployments: write

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      deploy_branch: ${{ steps.check.outputs.deploy_branch }}
    steps:
      - name: Validate deployment request
        id: check
        run: |
          # Determine branch to deploy
          if [ -n "${{ github.event.inputs.branch }}" ]; then
            DEPLOY_BRANCH="${{ github.event.inputs.branch }}"
          else
            # Default to master if no branch specified
            DEPLOY_BRANCH="master"
          fi
          
          echo "deploy_branch=$DEPLOY_BRANCH" >> $GITHUB_OUTPUT
          
          # Production deployments require explicit confirmation
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            if [ "$DEPLOY_BRANCH" != "master" ] && [ "$DEPLOY_BRANCH" != "main" ]; then
              echo "⚠️  WARNING: Attempting to deploy non-master branch to production!"
              echo "Branch: $DEPLOY_BRANCH"
              echo "This requires manual approval in the next step."
            fi
          fi
          
          echo "should_deploy=true" >> $GITHUB_OUTPUT
          
      - name: Log deployment info
        run: |
          echo "📋 Deployment Request Summary"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Branch: ${{ steps.check.outputs.deploy_branch }}"
          echo "Skip Tests: ${{ github.event.inputs.skip_tests }}"
          echo "Debug Mode: ${{ github.event.inputs.debug }}"
          echo "Triggered by: ${{ github.actor }}"

  test:
    needs: validate
    if: needs.validate.outputs.should_deploy == 'true' && github.event.inputs.skip_tests != 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: ${{ needs.validate.outputs.deploy_branch }}
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: 'phialo-design/pnpm-lock.yaml'
      
      - name: Install dependencies
        working-directory: ./phialo-design
        run: pnpm install --frozen-lockfile
      
      - name: Run type checking
        working-directory: ./phialo-design
        run: pnpm run typecheck
      
      - name: Run linting
        working-directory: ./phialo-design
        run: pnpm run lint
      
      - name: Run unit tests
        working-directory: ./phialo-design
        run: pnpm run test:run

  deploy:
    needs: [validate, test]
    if: |
      always() && 
      needs.validate.outputs.should_deploy == 'true' &&
      (needs.test.result == 'success' || github.event.inputs.skip_tests == 'true')
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: ${{ needs.validate.outputs.deploy_branch }}
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: 'phialo-design/pnpm-lock.yaml'
      
      - name: Install dependencies
        working-directory: ./phialo-design
        run: pnpm install --frozen-lockfile
      
      - name: Install worker dependencies
        working-directory: ./workers
        run: pnpm install --frozen-lockfile
      
      - name: Build Astro site
        uses: ./.github/actions/build-astro
        with:
          working-directory: ./phialo-design
          PUBLIC_TURNSTILE_SITE_KEY: ${{ secrets.PUBLIC_TURNSTILE_SITE_KEY }}
          PUBLIC_CLOUDFLARE_ANALYTICS_TOKEN: ${{ secrets.PUBLIC_CLOUDFLARE_ANALYTICS_TOKEN }}
      
      - name: Install Wrangler
        working-directory: ./workers
        run: pnpm install wrangler@4.32.0
      
      - name: Deploy to Cloudflare Workers
        id: deploy
        working-directory: ./workers
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          # Deploy the worker
          npx wrangler deploy --env ${{ github.event.inputs.environment }}
          
          # Determine the worker name based on environment
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            WORKER_NAME="phialo"
          else
            WORKER_NAME="phialo-design-preview"
          fi
          
          # Set secrets for the deployed worker
          echo "${{ secrets.RESEND_API_KEY }}" | npx wrangler secret put RESEND_API_KEY --name $WORKER_NAME --env=""
          echo "${{ secrets.FROM_EMAIL }}" | npx wrangler secret put FROM_EMAIL --name $WORKER_NAME --env=""
          echo "${{ secrets.TO_EMAIL }}" | npx wrangler secret put TO_EMAIL --name $WORKER_NAME --env=""
          echo "${{ secrets.TURNSTILE_SECRET_KEY }}" | npx wrangler secret put TURNSTILE_SECRET_KEY --name $WORKER_NAME --env=""
          
          # Set optional REPLY_TO_EMAIL if it exists
          if [ -n "${{ secrets.REPLY_TO_EMAIL }}" ]; then
            echo "${{ secrets.REPLY_TO_EMAIL }}" | npx wrangler secret put REPLY_TO_EMAIL --name $WORKER_NAME --env=""
          fi
      
      - name: Get deployment URL
        id: url
        run: |
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            echo "deployment_url=https://phialo.de" >> $GITHUB_OUTPUT
          else
            echo "deployment_url=https://phialo-design-preview.meise.workers.dev" >> $GITHUB_OUTPUT
          fi
      
      - name: Create production release tag
        id: create_tag
        if: github.event.inputs.environment == 'production' && success()
        continue-on-error: true  # Don't fail deployment if tag creation fails
        run: |
          # Generate timestamp-based tag name
          TAG_NAME="production-$(date -u '+%Y-%m-%d-%H%M%S')"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Fetch all tags to ensure we have the latest
          git fetch --tags
          
          # Create annotated tag with deployment metadata
          TAG_MESSAGE="Production deployment on $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          Deployment Details:
          - Deployed by: ${{ github.actor }}
          - Branch: ${{ needs.validate.outputs.deploy_branch }}
          - Commit: $(git rev-parse HEAD)
          - Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          - Environment URL: ${{ steps.url.outputs.deployment_url }}
          
          This tag marks an automated production deployment and can be used for:
          - Rolling back to this specific version
          - Tracking production release history
          - Generating changelogs between releases"
          
          # Create the annotated tag
          git tag -a "$TAG_NAME" -m "$TAG_MESSAGE"
          
          # Push the tag to the repository
          if git push origin "$TAG_NAME"; then
            echo "✅ Successfully created and pushed production tag: $TAG_NAME"
            echo "tag_created=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Warning: Failed to push tag $TAG_NAME to repository"
            echo "tag_created=false" >> $GITHUB_OUTPUT
            exit 1  # Exit with error to trigger continue-on-error
          fi
      
      - name: Create deployment record
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: '${{ needs.validate.outputs.deploy_branch }}',
              environment: '${{ github.event.inputs.environment }}',
              required_contexts: [],
              auto_merge: false,
              production_environment: ${{ github.event.inputs.environment == 'production' }}
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: '${{ steps.url.outputs.deployment_url }}',
              description: 'Deployment completed successfully'
            });
      
      - name: Post deployment summary
        run: |
          echo "## 🚀 Deployment Complete!"
          echo ""
          echo "**Environment**: ${{ github.event.inputs.environment }}"
          echo "**URL**: ${{ steps.url.outputs.deployment_url }}"
          echo "**Branch**: ${{ needs.validate.outputs.deploy_branch }}"
          echo "**Deployed by**: ${{ github.actor }}"
          echo "**Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          if [ "${{ github.event.inputs.environment }}" = "production" ] && [ -n "${{ steps.create_tag.outputs.tag_name }}" ]; then
            echo "**Release Tag**: \`${{ steps.create_tag.outputs.tag_name }}\`"
            if [ "${{ steps.create_tag.outputs.tag_created }}" = "true" ]; then
              echo "**Tag Status**: ✅ Successfully created"
            else
              echo "**Tag Status**: ⚠️ Tag creation failed (deployment succeeded)"
            fi
          fi
          echo ""
          echo "### Next Steps"
          if [ "${{ github.event.inputs.environment }}" = "preview" ]; then
            echo "- Test your changes at the preview URL"
            echo "- If everything looks good, deploy to production"
          else
            echo "- Monitor the production site for any issues"
            echo "- Check Cloudflare analytics for performance metrics"
            if [ "${{ steps.create_tag.outputs.tag_created }}" = "true" ]; then
              echo ""
              echo "### Rollback Instructions"
              echo "If you need to rollback to a previous version:"
              echo '```bash'
              echo '# List recent production tags'
              echo 'git tag -l "production-*" --sort=-version:refname | head -10'
              echo ''
              echo '# Deploy a specific tagged version'
              echo 'gh workflow run manual-deploy.yml \'
              echo '  -f environment=production \'
              echo '  -f branch=<tag-name> \'
              echo '  -f skip_tests=false'
              echo '```'
            fi
          fi

  notify-failure:
    needs: [validate, test, deploy]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Notify deployment failure
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_comment = `
            ## ❌ Manual Deployment Failed
            
            **Environment**: ${{ github.event.inputs.environment }}
            **Branch**: ${{ needs.validate.outputs.deploy_branch }}
            **Triggered by**: ${{ github.actor }}
            
            Please check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.
            `;
            
            // If this was triggered from a PR context, comment on the PR
            if (context.issue.number) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: issue_comment
              });
            }