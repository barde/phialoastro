name: Cloudflare PR Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # Check if we should deploy (skip for Dependabot PRs to avoid secret access issues)
  check-deploy:
    runs-on: ubuntu-latest
    name: Check Deployment Eligibility
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    permissions:
      pull-requests: write
    steps:
      - id: check
        run: |
          if [[ "${{ github.actor }}" == "dependabot[bot]" ]]; then
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "⚠️ Skipping deployment for Dependabot PR (secrets not available)"
          else
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "✅ Deployment eligible"
          fi
      
      - name: Comment on Dependabot PR
        if: github.actor == 'dependabot[bot]'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            
            // Check if we already commented
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Dependabot PR - Deployment Skipped')
            );
            
            if (!botComment) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `### 🤖 Dependabot PR - Deployment Skipped\n\n⚠️ **Preview deployment is not available for Dependabot PRs** due to security restrictions.\n\nTo test these changes:\n1. Merge the PR if tests pass\n2. Or manually trigger deployment after review\n3. Or check out the branch locally to test\n\nAll other CI checks will run normally.`
              });
            }

  deploy-preview:
    needs: check-deploy
    if: needs.check-deploy.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    name: Deploy PR Preview to Cloudflare Workers
    permissions:
      contents: read
      pull-requests: write
      deployments: write
    environment:
      name: preview
      url: https://phialo-pr-${{ github.event.pull_request.number }}.meise.workers.dev
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check for relevant file changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            should_deploy:
              - 'phialo-design/**'
              - 'workers/**'
              - '.github/workflows/cloudflare-pr-preview.yml'
      
      - name: Setup Node.js
        if: steps.changes.outputs.should_deploy == 'true' && github.actor != 'dependabot[bot]'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install pnpm
        if: steps.changes.outputs.should_deploy == 'true' && github.actor != 'dependabot[bot]'
        uses: pnpm/action-setup@v4
        with:
          version: 9
      
      - name: Get pnpm store directory
        if: steps.changes.outputs.should_deploy == 'true' && github.actor != 'dependabot[bot]'
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Setup pnpm cache
        if: steps.changes.outputs.should_deploy == 'true' && github.actor != 'dependabot[bot]'
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        if: steps.changes.outputs.should_deploy == 'true' && github.actor != 'dependabot[bot]'
        working-directory: ./phialo-design
        run: pnpm install --frozen-lockfile
      
      - name: Build Astro site
        if: steps.changes.outputs.should_deploy == 'true' && github.actor != 'dependabot[bot]'
        uses: ./.github/actions/build-astro-cached
        with:
          working-directory: ./phialo-design
          PUBLIC_TURNSTILE_SITE_KEY: ${{ secrets.PUBLIC_TURNSTILE_SITE_KEY }}
          PUBLIC_CLOUDFLARE_ANALYTICS_TOKEN: ${{ secrets.PUBLIC_CLOUDFLARE_ANALYTICS_TOKEN }}
          cache-version: 'v1'
        
      - name: Create temporary wrangler config
        if: steps.changes.outputs.should_deploy == 'true' && github.actor != 'dependabot[bot]'
        working-directory: ./workers
        run: |
          cat > wrangler-pr-${{ github.event.pull_request.number }}.toml << EOF
          name = "phialo-pr-${{ github.event.pull_request.number }}"
          main = "src/index.ts"
          compatibility_date = "2024-09-25"
          compatibility_flags = ["nodejs_compat"]
          workers_dev = true
          
          [assets]
          directory = "../phialo-design/dist"
          binding = "ASSETS"
          
          [vars]
          ENVIRONMENT = "preview"
          PR_NUMBER = "${{ github.event.pull_request.number }}"
          EOF
      
      - name: Install Wrangler
        if: steps.changes.outputs.should_deploy == 'true' && github.actor != 'dependabot[bot]'
        working-directory: ./workers
        run: npm install wrangler@4.22.0
      
      - name: Check required secrets
        id: check-secrets
        if: steps.changes.outputs.should_deploy == 'true' && github.actor != 'dependabot[bot]'
        run: |
          MISSING_SECRETS=""
          
          if [ -z "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" ]; then
            MISSING_SECRETS="${MISSING_SECRETS}- CLOUDFLARE_ACCOUNT_ID\n"
          fi
          
          if [ -z "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then
            MISSING_SECRETS="${MISSING_SECRETS}- CLOUDFLARE_API_TOKEN\n"
          fi
          
          if [ -z "${{ secrets.PUBLIC_TURNSTILE_SITE_KEY }}" ]; then
            MISSING_SECRETS="${MISSING_SECRETS}- PUBLIC_TURNSTILE_SITE_KEY\n"
          fi
          
          if [ -z "${{ secrets.TURNSTILE_SECRET_KEY }}" ]; then
            MISSING_SECRETS="${MISSING_SECRETS}- TURNSTILE_SECRET_KEY\n"
          fi
          
          if [ -z "${{ secrets.RESEND_API_KEY }}" ]; then
            MISSING_SECRETS="${MISSING_SECRETS}- RESEND_API_KEY\n"
          fi
          
          if [ -z "${{ secrets.FROM_EMAIL }}" ]; then
            MISSING_SECRETS="${MISSING_SECRETS}- FROM_EMAIL\n"
          fi
          
          if [ -z "${{ secrets.TO_EMAIL }}" ]; then
            MISSING_SECRETS="${MISSING_SECRETS}- TO_EMAIL\n"
          fi
          
          if [ -n "$MISSING_SECRETS" ]; then
            echo "❌ ERROR: The following secrets are missing from the 'preview' environment:"
            echo -e "$MISSING_SECRETS"
            echo ""
            echo "To fix this:"
            echo "1. Go to: https://github.com/${{ github.repository }}/settings/environments"
            echo "2. Create or configure the 'preview' environment"
            echo "3. Add ALL 7 required secrets listed above"
            echo ""
            echo "See documentation: https://github.com/${{ github.repository }}/blob/master/phialo-design/docs/how-to/ENVIRONMENT-SETUP-GUIDE.md"
            exit 1
          fi
          
          echo "✅ All required secrets are configured"
      
      - name: Deploy to Cloudflare Workers
        id: deploy
        if: steps.changes.outputs.should_deploy == 'true' && github.actor != 'dependabot[bot]'
        working-directory: ./workers
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          # Deploy the worker
          echo "Deploying worker..."
          npx wrangler deploy --config wrangler-pr-${{ github.event.pull_request.number }}.toml
          
          # Wait for deployment to be fully active
          # Cloudflare needs time to propagate the deployment globally
          echo "Waiting for deployment to become fully active..."
          
          # Simple retry mechanism with exponential backoff
          MAX_ATTEMPTS=10
          ATTEMPT=1
          WAIT_TIME=5
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT/$MAX_ATTEMPTS: Setting secrets..."
            
            # Try to set a test secret to check if deployment is ready
            if echo "test" | npx wrangler secret put TEST_SECRET --name phialo-pr-${{ github.event.pull_request.number }} --env="" 2>/dev/null; then
              echo "Deployment is ready, proceeding with actual secrets..."
              break
            else
              if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
                echo "Failed to verify deployment readiness after $MAX_ATTEMPTS attempts"
                exit 1
              fi
              echo "Deployment not ready yet, waiting ${WAIT_TIME} seconds..."
              sleep $WAIT_TIME
              WAIT_TIME=$((WAIT_TIME * 2))  # Exponential backoff
              ATTEMPT=$((ATTEMPT + 1))
            fi
          done
          
          # Now set the actual secrets
          echo "Setting production secrets..."
          echo "${{ secrets.RESEND_API_KEY }}" | npx wrangler secret put RESEND_API_KEY --name phialo-pr-${{ github.event.pull_request.number }} --env=""
          echo "${{ secrets.FROM_EMAIL }}" | npx wrangler secret put FROM_EMAIL --name phialo-pr-${{ github.event.pull_request.number }} --env=""
          echo "${{ secrets.TO_EMAIL }}" | npx wrangler secret put TO_EMAIL --name phialo-pr-${{ github.event.pull_request.number }} --env=""
          
          # REPLY_TO_EMAIL is optional - only set if provided
          if [ ! -z "${{ secrets.REPLY_TO_EMAIL }}" ]; then
            echo "${{ secrets.REPLY_TO_EMAIL }}" | npx wrangler secret put REPLY_TO_EMAIL --name phialo-pr-${{ github.event.pull_request.number }} --env=""
          fi
          
          echo "${{ secrets.TURNSTILE_SECRET_KEY }}" | npx wrangler secret put TURNSTILE_SECRET_KEY --name phialo-pr-${{ github.event.pull_request.number }} --env=""
          
          echo "All secrets set successfully!"
      
      - name: Extract deployment URL
        id: extract-url
        if: steps.changes.outputs.should_deploy == 'true' && github.actor != 'dependabot[bot]'
        working-directory: ./workers
        run: |
          # The deployment URL will be in the format: https://phialo-pr-<number>.meise.workers.dev
          PREVIEW_URL="https://phialo-pr-${{ github.event.pull_request.number }}.meise.workers.dev"
          echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT
      
      - name: Comment PR with preview status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr_number = context.issue.number;
            const preview_url = '${{ steps.extract-url.outputs.preview_url }}' || '';
            const shouldDeploy = '${{ steps.changes.outputs.should_deploy }}' === 'true';
            const isDependabot = '${{ github.actor }}' === 'dependabot[bot]';
            
            // Create a unique identifier for this comment
            const identifier = '<!-- cloudflare-preview-deployment -->';
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body?.includes(identifier)
            );
            
            let body;
            if (isDependabot) {
              body = identifier + '\n' +
                '## 🤖 Cloudflare Preview Deployment Skipped\n\n' +
                'Preview deployments are not available for Dependabot PRs due to security restrictions.\n\n' +
                'Once this PR is reviewed and merged, the changes will be deployed automatically.\n';
            } else if (shouldDeploy && preview_url) {
              body = identifier + '\n' +
                '## 🚀 Cloudflare Preview Deployment\n\n' +
                'Your preview deployment is ready!\n\n' +
                '🔗 **Preview URL**: ' + preview_url + '\n\n' +
                'This deployment will be automatically updated when you push new commits to this PR.\n';
            } else {
              body = identifier + '\n' +
                '## ℹ️ Cloudflare Preview Deployment Skipped\n\n' +
                'No code changes detected in `phialo-design/` or `workers/` that require a new preview deployment.\n\n' +
                'If you wish to force a deployment, please update code files or add a code comment.\n';
            }
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: body
              });
            }
      
      - name: Add 'preview-deployed' label
        if: success() && steps.changes.outputs.should_deploy == 'true' && github.actor != 'dependabot[bot]' && steps.extract-url.outputs.preview_url != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // First, ensure the label exists in the repository
            try {
              await github.rest.issues.getLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'preview-deployed'
              });
            } catch (error) {
              if (error.status === 404) {
                // Label doesn't exist, create it
                await github.rest.issues.createLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: 'preview-deployed',
                  description: 'PR has an active Cloudflare preview deployment',
                  color: '0052cc' // Blue color
                });
                console.log("Created 'preview-deployed' label");
              }
            }
            
            // Add the label to the PR
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['preview-deployed']
            });
            console.log("Added 'preview-deployed' label to PR #" + context.issue.number);
      
      - name: Clean up temporary config
        if: always() && steps.changes.outputs.should_deploy == 'true' && github.actor != 'dependabot[bot]'
        working-directory: ./workers
        run: |
          rm -f wrangler-pr-${{ github.event.pull_request.number }}.toml