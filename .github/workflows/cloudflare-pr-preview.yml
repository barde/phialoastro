name: Cloudflare PR Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    name: Deploy PR Preview to Cloudflare Workers
    permissions:
      contents: read
      pull-requests: write
      deployments: write
    environment:
      name: preview
      url: https://phialo-pr-${{ github.event.pull_request.number }}.meise.workers.dev
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: true
      
      - name: Check for relevant file changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            should_deploy:
              - 'phialo-design/**'
              - 'workers/**'
              - '.github/workflows/cloudflare-pr-preview.yml'
      
      - name: Setup Node.js
        if: steps.changes.outputs.should_deploy == 'true' && github.actor != 'dependabot[bot]'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install pnpm
        if: steps.changes.outputs.should_deploy == 'true' && github.actor != 'dependabot[bot]'
        uses: pnpm/action-setup@v4
        with:
          version: 9
      
      - name: Get pnpm store directory
        if: steps.changes.outputs.should_deploy == 'true' && github.actor != 'dependabot[bot]'
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Setup pnpm cache
        if: steps.changes.outputs.should_deploy == 'true' && github.actor != 'dependabot[bot]'
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        if: steps.changes.outputs.should_deploy == 'true' && github.actor != 'dependabot[bot]'
        working-directory: ./phialo-design
        run: pnpm install --frozen-lockfile
      
      - name: Build Astro site
        if: steps.changes.outputs.should_deploy == 'true' && github.actor != 'dependabot[bot]'
        working-directory: ./phialo-design
        env:
          PUBLIC_TURNSTILE_SITE_KEY: ${{ secrets.PUBLIC_TURNSTILE_SITE_KEY }}
        run: pnpm run build
        
      - name: Create temporary wrangler config
        if: steps.changes.outputs.should_deploy == 'true' && github.actor != 'dependabot[bot]'
        working-directory: ./workers
        run: |
          cat > wrangler-pr-${{ github.event.pull_request.number }}.toml << EOF
          name = "phialo-pr-${{ github.event.pull_request.number }}"
          main = "src/index.ts"
          compatibility_date = "2024-09-25"
          compatibility_flags = ["nodejs_compat"]
          workers_dev = true
          
          [assets]
          directory = "../phialo-design/dist"
          binding = "ASSETS"
          
          [vars]
          ENVIRONMENT = "preview"
          PR_NUMBER = "${{ github.event.pull_request.number }}"
          EOF
      
      - name: Install Wrangler
        if: steps.changes.outputs.should_deploy == 'true' && github.actor != 'dependabot[bot]'
        working-directory: ./workers
        run: npm install wrangler@4.22.0
      
      - name: Deploy to Cloudflare Workers
        id: deploy
        if: steps.changes.outputs.should_deploy == 'true' && github.actor != 'dependabot[bot]'
        working-directory: ./workers
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          # Deploy the worker
          npx wrangler deploy --config wrangler-pr-${{ github.event.pull_request.number }}.toml
          
          # Set secrets for the deployed worker
          echo "${{ secrets.RESEND_API_KEY }}" | npx wrangler secret put RESEND_API_KEY --name phialo-pr-${{ github.event.pull_request.number }}
          echo "${{ secrets.FROM_EMAIL }}" | npx wrangler secret put FROM_EMAIL --name phialo-pr-${{ github.event.pull_request.number }}
          echo "${{ secrets.TO_EMAIL }}" | npx wrangler secret put TO_EMAIL --name phialo-pr-${{ github.event.pull_request.number }}
          echo "${{ secrets.TURNSTILE_SECRET_KEY }}" | npx wrangler secret put TURNSTILE_SECRET_KEY --name phialo-pr-${{ github.event.pull_request.number }}
      
      - name: Extract deployment URL
        id: extract-url
        if: steps.changes.outputs.should_deploy == 'true' && github.actor != 'dependabot[bot]'
        working-directory: ./workers
        run: |
          # The deployment URL will be in the format: https://phialo-pr-<number>.meise.workers.dev
          PREVIEW_URL="https://phialo-pr-${{ github.event.pull_request.number }}.meise.workers.dev"
          echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT
      
      - name: Comment PR with preview status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr_number = context.issue.number;
            const preview_url = '${{ steps.extract-url.outputs.preview_url }}' || '';
            const shouldDeploy = '${{ steps.changes.outputs.should_deploy }}' === 'true';
            const isDependabot = '${{ github.actor }}' === 'dependabot[bot]';
            
            // Create a unique identifier for this comment
            const identifier = '<!-- cloudflare-preview-deployment -->';
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body?.includes(identifier)
            );
            
            let body;
            if (isDependabot) {
              body = identifier + '\n' +
                '## ü§ñ Cloudflare Preview Deployment Skipped\n\n' +
                'Preview deployments are not available for Dependabot PRs due to security restrictions.\n\n' +
                'Once this PR is reviewed and merged, the changes will be deployed automatically.\n';
            } else if (shouldDeploy && preview_url) {
              body = identifier + '\n' +
                '## üöÄ Cloudflare Preview Deployment\n\n' +
                'Your preview deployment is ready!\n\n' +
                'üîó **Preview URL**: ' + preview_url + '\n\n' +
                'This deployment will be automatically updated when you push new commits to this PR.\n';
            } else {
              body = identifier + '\n' +
                '## ‚ÑπÔ∏è Cloudflare Preview Deployment Skipped\n\n' +
                'No code changes detected in `phialo-design/` or `workers/` that require a new preview deployment.\n\n' +
                'If you wish to force a deployment, please update code files or add a code comment.\n';
            }
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: body
              });
            }
      
      - name: Clean up temporary config
        if: always() && steps.changes.outputs.should_deploy == 'true' && github.actor != 'dependabot[bot]'
        working-directory: ./workers
        run: |
          rm -f wrangler-pr-${{ github.event.pull_request.number }}.toml