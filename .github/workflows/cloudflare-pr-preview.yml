name: Cloudflare PR Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'phialo-design/**'
      - 'workers/**'
      - '.github/workflows/cloudflare-pr-preview.yml'

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    name: Deploy PR Preview to Cloudflare Workers
    permissions:
      contents: read
      pull-requests: write
      deployments: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        working-directory: ./phialo-design
        run: pnpm install --frozen-lockfile
      
      - name: Build Astro site
        working-directory: ./phialo-design
        run: pnpm run build
        
      - name: Create temporary wrangler config
        working-directory: ./workers
        run: |
          cat > wrangler-pr-${{ github.event.pull_request.number }}.toml << EOF
          name = "phialo-pr-${{ github.event.pull_request.number }}"
          main = "src/index.ts"
          compatibility_date = "2024-09-25"
          workers_dev = true
          
          [assets]
          directory = "../phialo-design/dist"
          binding = "ASSETS"
          
          [vars]
          ENVIRONMENT = "preview"
          PR_NUMBER = "${{ github.event.pull_request.number }}"
          EOF
      
      - name: Check for Cloudflare API Token
        id: check-token
        run: |
          if [ -z "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then
            echo "::warning::Cloudflare API Token not configured. Skipping deployment."
            echo "configured=false" >> $GITHUB_OUTPUT
          else
            echo "configured=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Deploy to Cloudflare Workers
        id: deploy
        if: steps.check-token.outputs.configured == 'true'
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: 'workers'
          wranglerVersion: '4.22.0'
          command: deploy --config wrangler-pr-${{ github.event.pull_request.number }}.toml
      
      - name: Extract deployment URL
        id: extract-url
        if: steps.check-token.outputs.configured == 'true'
        working-directory: ./workers
        run: |
          # The deployment URL will be in the format: https://phialo-pr-<number>.meise.workers.dev
          PREVIEW_URL="https://phialo-pr-${{ github.event.pull_request.number }}.meise.workers.dev"
          echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT
      
      - name: Comment PR with preview URL
        if: steps.check-token.outputs.configured == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr_number = context.issue.number;
            const preview_url = '${{ steps.extract-url.outputs.preview_url }}';
            
            // Create a unique identifier for this comment
            const identifier = '<!-- cloudflare-preview-deployment -->';
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body?.includes(identifier)
            );
            
            const body = identifier + '\n' +
              '## 🚀 Cloudflare Preview Deployment\n\n' +
              'Your preview deployment is ready!\n\n' +
              '🔗 **Preview URL**: ' + preview_url + '\n\n' +
              'This deployment will be automatically updated when you push new commits to this PR.\n';
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: body
              });
            }
      
      - name: Comment PR when API token not configured
        if: steps.check-token.outputs.configured == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr_number = context.issue.number;
            
            // Create a unique identifier for this comment
            const identifier = '<!-- cloudflare-preview-deployment -->';
            
            const body = identifier + '\n' +
              '## ⚠️ Cloudflare Preview Deployment Skipped\n\n' +
              'The Cloudflare API token is not configured. To enable preview deployments:\n\n' +
              '1. Create a Cloudflare API token with these permissions:\n' +
              '   - Account: `Workers Scripts:Edit`, `Workers KV Storage:Edit`\n' + 
              '   - Zone (phialo.de): `Workers Routes:Edit`, `Zone:Read`\n' +
              '2. Add it as `CLOUDFLARE_API_TOKEN` in repository secrets\n' +
              '3. Re-run this workflow\n\n' +
              'The build artifacts have been created successfully and are ready for deployment.';
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body?.includes(identifier)
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: body
              });
            }
      
      - name: Clean up temporary config
        if: always()
        working-directory: ./workers
        run: |
          rm -f wrangler-pr-${{ github.event.pull_request.number }}.toml