name: E2E Tests (Sharded)

on:
  workflow_call:
    inputs:
      total-shards:
        description: 'Total number of shards'
        required: false
        type: number
        default: 4
    outputs:
      test-time:
        description: 'Total test execution time'
        value: ${{ jobs.merge-reports.outputs.test-time }}
      test-count:
        description: 'Total number of tests executed'
        value: ${{ jobs.merge-reports.outputs.test-count }}

jobs:
  # Run tests in parallel shards
  test-shard:
    name: Shard ${{ matrix.shard }}/${{ inputs.total-shards }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3, 4]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        working-directory: phialo-design
        run: |
          pnpm install --frozen-lockfile
          npx playwright install chromium firefox

      - name: Run E2E tests (Shard ${{ matrix.shard }})
        working-directory: phialo-design
        env:
          CI: true
          SHARD_INDEX: ${{ matrix.shard }}
          TOTAL_SHARDS: ${{ inputs.total-shards }}
        run: |
          START_TIME=$(date +%s)
          npx playwright test --config=playwright.shard.config.ts
          END_TIME=$(date +%s)
          echo "shard-time=$((END_TIME - START_TIME))" >> $GITHUB_OUTPUT

      - name: Upload blob report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: blob-report-${{ matrix.shard }}
          path: phialo-design/blob-report-${{ matrix.shard }}
          retention-days: 1

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.shard }}
          path: phialo-design/test-results-shard-${{ matrix.shard }}.json
          retention-days: 1

  # Merge reports from all shards
  merge-reports:
    name: Merge Test Reports
    needs: test-shard
    if: always()
    runs-on: ubuntu-latest
    outputs:
      test-time: ${{ steps.merge.outputs.test-time }}
      test-count: ${{ steps.merge.outputs.test-count }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        working-directory: phialo-design
        run: pnpm install --frozen-lockfile

      - name: Download all blob reports
        uses: actions/download-artifact@v4
        with:
          pattern: blob-report-*
          path: phialo-design/all-blob-reports

      - name: Merge reports
        id: merge
        working-directory: phialo-design
        run: |
          # Merge all blob reports into HTML report
          npx playwright merge-reports --reporter html ./all-blob-reports
          
          # Extract test counts and times from JSON reports
          TOTAL_TESTS=0
          TOTAL_TIME=0
          
          # Download and process JSON reports
          for i in {1..4}; do
            if [ -f "test-results-shard-$i.json" ]; then
              TESTS=$(jq '.stats.tests' "test-results-shard-$i.json" 2>/dev/null || echo 0)
              TIME=$(jq '.stats.duration' "test-results-shard-$i.json" 2>/dev/null || echo 0)
              TOTAL_TESTS=$((TOTAL_TESTS + TESTS))
              TOTAL_TIME=$((TOTAL_TIME + TIME))
            fi
          done
          
          # Convert to seconds
          TOTAL_TIME_SEC=$((TOTAL_TIME / 1000))
          
          echo "test-count=$TOTAL_TESTS" >> $GITHUB_OUTPUT
          echo "test-time=$TOTAL_TIME_SEC" >> $GITHUB_OUTPUT
          
          echo "### Test Summary"
          echo "- Total tests: $TOTAL_TESTS"
          echo "- Total time: ${TOTAL_TIME_SEC}s"
          echo "- Average time per shard: $((TOTAL_TIME_SEC / 4))s"

      - name: Upload merged HTML report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: phialo-design/playwright-report/
          retention-days: 7

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const testCount = '${{ steps.merge.outputs.test-count }}';
            const testTime = '${{ steps.merge.outputs.test-time }}';
            
            const comment = `### ðŸŽ­ E2E Test Results (Sharded)
            
            - **Tests Run:** ${testCount}
            - **Total Time:** ${testTime}s
            - **Parallelization:** 4 shards Ã— 2 workers = 8 parallel executions
            - **Average Time per Shard:** ${Math.round(testTime / 4)}s
            
            View the [full test report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) in the artifacts.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });