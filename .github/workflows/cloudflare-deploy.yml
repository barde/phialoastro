name: Deploy to Cloudflare Workers

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'phialo-design/**'
      - 'workers/**'
      - '.github/workflows/cloudflare-deploy.yml'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Cloudflare Workers
    permissions:
      contents: read
      pull-requests: write
      deployments: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: |
            phialo-design/pnpm-lock.yaml
            workers/package-lock.json
      
      - name: Install dependencies
        working-directory: ./phialo-design
        run: pnpm install --frozen-lockfile
      
      - name: Build Astro site
        working-directory: ./phialo-design
        run: pnpm run build
        env:
          WEB3FORMS_ACCESS_KEY: ${{ secrets.WEB3FORMS_ACCESS_KEY }}
      
      - name: Install worker dependencies
        working-directory: ./workers
        run: npm ci
      
      # Deploy to production only on master branch
      - name: Deploy to Production
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        id: deploy-production
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: 'workers'
          command: deploy --env production
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          vars: |
            WEB3FORMS_ACCESS_KEY=${{ secrets.WEB3FORMS_ACCESS_KEY }}
      
      # Create preview deployment for PRs and non-master branches
      - name: Create Preview Deployment
        if: github.ref != 'refs/heads/master' || github.event_name == 'pull_request'
        id: deploy-preview
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: 'workers'
          # Use versions upload to create a preview without deploying to production
          command: versions upload --experimental-versions
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          vars: |
            WEB3FORMS_ACCESS_KEY=${{ secrets.WEB3FORMS_ACCESS_KEY }}
      
      # Comment PR with preview URL
      - name: Comment PR with deployment URL
        if: github.event_name == 'pull_request' && steps.deploy-preview.outputs.deployment-url
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deployment_url = '${{ steps.deploy-preview.outputs.deployment-url }}';
            const pr_number = context.issue.number;
            
            // Create a unique identifier for this comment
            const identifier = '<!-- cloudflare-preview-deployment -->';
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body?.includes(identifier)
            );
            
            const body = `${identifier}
## ðŸš€ Cloudflare Preview Deployment

Your preview deployment is ready!

ðŸ”— **Preview URL**: ${deployment_url}

This is a versioned preview URL that will remain stable for this specific deployment. The URL format is:
\`<VERSION_PREFIX>-phialo-design.<SUBDOMAIN>.workers.dev\`

---
*This preview uses [Cloudflare's native Preview URLs](https://developers.cloudflare.com/workers/configuration/previews/) feature.*
`;
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: body
              });
            }