name: Cloudflare - List and Cleanup Workers

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'list'
        type: choice
        options:
          - 'list'
          - 'delete-pr-workers'
          - 'delete-specific-worker'
          - 'list-and-delete-pr-workers'
      worker_name:
        description: 'Worker name (only for delete-specific-worker action)'
        required: false
        type: string
      include_all_workers:
        description: 'List all workers, not just PR workers (only for list action)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      environment:
        description: 'GitHub environment to use for secrets'
        required: false
        default: 'preview'
        type: choice
        options:
          - 'preview'
          - 'production'
          - 'master'

jobs:
  manage-workers:
    runs-on: ubuntu-latest
    name: Manage Cloudflare Workers
    environment: ${{ github.event.inputs.environment || 'preview' }}  # Use selected environment, default to preview
    permissions:
      contents: read
      pull-requests: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        working-directory: ./workers
        run: npm install wrangler@4.27.0
      
      - name: List workers
        if: github.event.inputs.action == 'list'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          INCLUDE_ALL: ${{ github.event.inputs.include_all_workers }}
        run: |
          echo "========================================="
          echo "üìã Cloudflare Workers List"
          echo "========================================="
          echo ""
          
          # Check if credentials are set
          if [ -z "$CLOUDFLARE_ACCOUNT_ID" ]; then
            echo "‚ùå Error: CLOUDFLARE_ACCOUNT_ID is not set"
            echo "This workflow requires the CLOUDFLARE_ACCOUNT_ID secret to be configured."
            echo "Please ensure it's added to the repository secrets."
            exit 1
          fi
          
          if [ -z "$CLOUDFLARE_API_TOKEN" ]; then
            echo "‚ùå Error: CLOUDFLARE_API_TOKEN is not set"
            echo "This workflow requires the CLOUDFLARE_API_TOKEN secret to be configured."
            echo "Please ensure it's added to the repository secrets."
            exit 1
          fi
          
          # Get all workers from Cloudflare API
          echo "üì° Fetching workers from Cloudflare..."
          RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts" \
               -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
               -H "Content-Type: application/json")
          
          # Check if the API call was successful
          if ! echo "$RESPONSE" | jq -e '.success' > /dev/null 2>&1; then
            echo "‚ùå Failed to fetch workers from Cloudflare API"
            echo "Response: $RESPONSE"
            exit 1
          fi
          
          # Extract worker details
          WORKERS_JSON=$(echo "$RESPONSE" | jq -r '.result')
          
          # Check if result is null or empty array
          if [ "$WORKERS_JSON" = "null" ] || [ "$WORKERS_JSON" = "[]" ]; then
            echo "‚úÖ No workers found in the account"
            exit 0
          fi
          
          ALL_WORKERS=$(echo "$WORKERS_JSON" | jq -r '.[].id')
          
          if [ -z "$ALL_WORKERS" ] || [ "$ALL_WORKERS" = "" ]; then
            echo "‚úÖ No workers found in the account"
            exit 0
          fi
          
          # Count total workers (only if not empty)
          TOTAL_COUNT=$(echo "$ALL_WORKERS" | grep -c . || echo "0")
          
          # Filter PR workers
          PR_WORKERS=$(echo "$ALL_WORKERS" | grep '^phialo-pr-[0-9]\+$' || echo "")
          if [ -n "$PR_WORKERS" ]; then
            PR_COUNT=$(echo "$PR_WORKERS" | grep -c . || echo "0")
          else
            PR_COUNT=0
            PR_WORKERS=""
          fi
          
          # Filter other workers
          OTHER_WORKERS=$(echo "$ALL_WORKERS" | grep -v '^phialo-pr-[0-9]\+$' || echo "")
          if [ -n "$OTHER_WORKERS" ]; then
            OTHER_COUNT=$(echo "$OTHER_WORKERS" | grep -c . || echo "0")
          else
            OTHER_COUNT=0
            OTHER_WORKERS=""
          fi
          
          echo "üìä Summary:"
          echo "  Total workers: $TOTAL_COUNT"
          echo "  PR workers: $PR_COUNT"
          echo "  Other workers: $OTHER_COUNT"
          echo ""
          
          # Get list of open PRs for reference
          echo "üìÑ Fetching open PRs..."
          OPEN_PRS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               "https://api.github.com/repos/${{ github.repository }}/pulls?state=open&per_page=100" \
               | jq -r '.[].number' 2>/dev/null || echo "")
          
          if [ -n "$PR_WORKERS" ]; then
            echo "========================================="
            echo "üîß PR Preview Workers ($PR_COUNT)"
            echo "========================================="
            
            for worker in $PR_WORKERS; do
              PR_NUM=${worker#phialo-pr-}
              CREATED_DATE=$(echo "$WORKERS_JSON" | jq -r ".[] | select(.id==\"$worker\") | .created_on" | cut -d'T' -f1)
              
              # Check if PR is still open
              if echo "$OPEN_PRS" | grep -q "^$PR_NUM$"; then
                STATUS="‚úÖ PR #$PR_NUM is OPEN"
              else
                STATUS="‚ö†Ô∏è  PR #$PR_NUM is CLOSED/MERGED (orphaned)"
              fi
              
              echo "  ‚Ä¢ $worker"
              echo "    Created: $CREATED_DATE"
              echo "    Status: $STATUS"
              echo "    URL: https://${worker}.meise.workers.dev"
              echo ""
            done
          fi
          
          if [ "$INCLUDE_ALL" == "true" ] && [ -n "$OTHER_WORKERS" ]; then
            echo "========================================="
            echo "üì¶ Other Workers ($OTHER_COUNT)"
            echo "========================================="
            
            for worker in $OTHER_WORKERS; do
              CREATED_DATE=$(echo "$WORKERS_JSON" | jq -r ".[] | select(.id==\"$worker\") | .created_on" | cut -d'T' -f1)
              
              echo "  ‚Ä¢ $worker"
              echo "    Created: $CREATED_DATE"
              
              # Determine worker type/URL
              if [[ "$worker" == "phialo-design-preview" ]]; then
                echo "    Type: Preview environment"
                echo "    URL: https://phialo-design-preview.meise.workers.dev"
              elif [[ "$worker" == "phialo-design" ]]; then
                echo "    Type: Production"
                echo "    URL: https://phialo.de"
              elif [[ "$worker" == "phialo-master" ]]; then
                echo "    Type: Master branch deployment"
                echo "    URL: https://phialo-master.meise.workers.dev"
              else
                echo "    Type: Custom/Unknown"
                echo "    URL: https://${worker}.meise.workers.dev"
              fi
              echo ""
            done
          fi
          
          # Provide recommendations
          ORPHANED_COUNT=0
          if [ "$PR_COUNT" -gt 0 ] && [ -n "$PR_WORKERS" ]; then
            # Count orphaned workers properly
            ORPHANED_LIST=$(for worker in $PR_WORKERS; do
              PR_NUM=${worker#phialo-pr-}
              if [ -z "$OPEN_PRS" ] || ! echo "$OPEN_PRS" | grep -q "^$PR_NUM$"; then
                echo "1"
              fi
            done)
            
            if [ -n "$ORPHANED_LIST" ]; then
              ORPHANED_COUNT=$(echo "$ORPHANED_LIST" | grep -c . || echo "0")
            else
              ORPHANED_COUNT=0
            fi
            
            if [ "$ORPHANED_COUNT" -gt 0 ]; then
              echo "========================================="
              echo "‚ö†Ô∏è  Recommendations"
              echo "========================================="
              echo "Found $ORPHANED_COUNT orphaned PR worker(s) that can be safely deleted."
              echo ""
              echo "To clean them up, run this workflow again with:"
              echo "  ‚Ä¢ Action: 'delete-pr-workers'"
              echo ""
            fi
          fi
          
          # Add to summary
          echo "## üìã Cloudflare Workers Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Statistics" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Workers:** $TOTAL_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **PR Workers:** $PR_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Other Workers:** $OTHER_COUNT" >> $GITHUB_STEP_SUMMARY
          
          if [ "$ORPHANED_COUNT" -gt 0 ]; then
            echo "- **‚ö†Ô∏è Orphaned PR Workers:** $ORPHANED_COUNT" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Delete all PR workers
        if: github.event.inputs.action == 'delete-pr-workers'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        working-directory: ./workers
        run: |
          echo "========================================="
          echo "üóëÔ∏è  Deleting All PR Workers"
          echo "========================================="
          echo ""
          
          # Check if credentials are set
          if [ -z "$CLOUDFLARE_ACCOUNT_ID" ] || [ -z "$CLOUDFLARE_API_TOKEN" ]; then
            echo "‚ùå Error: Cloudflare credentials are not configured"
            echo "Please ensure CLOUDFLARE_ACCOUNT_ID and CLOUDFLARE_API_TOKEN are set in repository secrets."
            exit 1
          fi
          
          # Get all workers
          RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts" \
               -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
               -H "Content-Type: application/json")
          
          # Check if the API call was successful
          if ! echo "$RESPONSE" | jq -e '.success' > /dev/null 2>&1; then
            echo "‚ùå Failed to fetch workers from Cloudflare API"
            exit 1
          fi
          
          WORKERS_JSON=$(echo "$RESPONSE" | jq -r '.result')
          
          # Check if result is null or empty array
          if [ "$WORKERS_JSON" = "null" ] || [ "$WORKERS_JSON" = "[]" ]; then
            echo "‚úÖ No workers found in the account"
            exit 0
          fi
          
          ALL_WORKERS=$(echo "$WORKERS_JSON" | jq -r '.[].id' 2>/dev/null || echo "")
          
          if [ -z "$ALL_WORKERS" ]; then
            echo "‚úÖ No workers found"
            exit 0
          fi
          
          PR_WORKERS=$(echo "$ALL_WORKERS" | grep '^phialo-pr-[0-9]\+$' || echo "")
          
          if [ -z "$PR_WORKERS" ] || [ "$PR_WORKERS" = "" ]; then
            echo "‚úÖ No PR workers found"
            exit 0
          fi
          
          WORKER_COUNT=$(echo "$PR_WORKERS" | grep -c . || echo "0")
          echo "Found $WORKER_COUNT PR worker(s) to delete:"
          echo "$PR_WORKERS" | sed 's/^/  - /'
          echo ""
          
          DELETED_COUNT=0
          FAILED_COUNT=0
          
          for worker in $PR_WORKERS; do
            echo -n "Deleting $worker... "
            if npx wrangler delete --name "$worker" --force 2>/dev/null; then
              echo "‚úÖ Deleted"
              DELETED_COUNT=$((DELETED_COUNT + 1))
            else
              echo "‚ùå Failed"
              FAILED_COUNT=$((FAILED_COUNT + 1))
            fi
          done
          
          echo ""
          echo "========================================="
          echo "Summary:"
          echo "  ‚úÖ Deleted: $DELETED_COUNT"
          if [ $FAILED_COUNT -gt 0 ]; then
            echo "  ‚ùå Failed: $FAILED_COUNT"
          fi
          
          # Add to summary
          echo "## üóëÔ∏è PR Workers Deletion Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Workers Found:** $WORKER_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Successfully Deleted:** $DELETED_COUNT" >> $GITHUB_STEP_SUMMARY
          if [ $FAILED_COUNT -gt 0 ]; then
            echo "- **Failed:** $FAILED_COUNT" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Delete specific worker
        if: github.event.inputs.action == 'delete-specific-worker'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          WORKER_NAME: ${{ github.event.inputs.worker_name }}
        working-directory: ./workers
        run: |
          if [ -z "$WORKER_NAME" ]; then
            echo "‚ùå Error: Worker name is required for delete-specific-worker action"
            exit 1
          fi
          
          # Check if credentials are set
          if [ -z "$CLOUDFLARE_ACCOUNT_ID" ] || [ -z "$CLOUDFLARE_API_TOKEN" ]; then
            echo "‚ùå Error: Cloudflare credentials are not configured"
            echo "Please ensure CLOUDFLARE_ACCOUNT_ID and CLOUDFLARE_API_TOKEN are set in repository secrets."
            exit 1
          fi
          
          echo "========================================="
          echo "üóëÔ∏è  Deleting Specific Worker"
          echo "========================================="
          echo ""
          echo "Worker to delete: $WORKER_NAME"
          echo ""
          
          # Check if worker exists
          RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/$WORKER_NAME" \
               -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
               -H "Content-Type: application/json")
          
          if echo "$RESPONSE" | grep -q '"success":true'; then
            echo "‚úÖ Worker found, proceeding with deletion..."
            
            if npx wrangler delete --name "$WORKER_NAME" --force; then
              echo ""
              echo "‚úÖ Successfully deleted worker: $WORKER_NAME"
              
              echo "## ‚úÖ Worker Deleted" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Successfully deleted worker: **$WORKER_NAME**" >> $GITHUB_STEP_SUMMARY
            else
              echo ""
              echo "‚ùå Failed to delete worker: $WORKER_NAME"
              exit 1
            fi
          else
            echo "‚ùå Worker not found: $WORKER_NAME"
            echo ""
            echo "Please check the worker name and try again."
            
            echo "## ‚ùå Worker Not Found" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Worker **$WORKER_NAME** does not exist in the account." >> $GITHUB_STEP_SUMMARY
            
            exit 1
          fi
      
      - name: List and delete all PR workers
        if: github.event.inputs.action == 'list-and-delete-pr-workers'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        working-directory: ./workers
        run: |
          echo "========================================="
          echo "üìã List and Delete All PR Workers"
          echo "========================================="
          echo ""
          
          # Check if credentials are set
          if [ -z "$CLOUDFLARE_ACCOUNT_ID" ] || [ -z "$CLOUDFLARE_API_TOKEN" ]; then
            echo "‚ùå Error: Cloudflare credentials are not configured"
            echo "Please ensure CLOUDFLARE_ACCOUNT_ID and CLOUDFLARE_API_TOKEN are set in repository secrets."
            exit 1
          fi
          
          # Get all workers
          echo "üì° Fetching workers from Cloudflare..."
          RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts" \
               -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
               -H "Content-Type: application/json")
          
          # Check if the API call was successful
          if ! echo "$RESPONSE" | jq -e '.success' > /dev/null 2>&1; then
            echo "‚ùå Failed to fetch workers from Cloudflare API"
            exit 1
          fi
          
          WORKERS_JSON=$(echo "$RESPONSE" | jq -r '.result')
          
          # Check if result is null or empty array
          if [ "$WORKERS_JSON" = "null" ] || [ "$WORKERS_JSON" = "[]" ]; then
            echo "‚úÖ No workers found in the account"
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## ‚úÖ No Workers Found" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          
          ALL_WORKERS=$(echo "$WORKERS_JSON" | jq -r '.[].id' 2>/dev/null || echo "")
          
          if [ -z "$ALL_WORKERS" ]; then
            echo "‚úÖ No workers found"
            exit 0
          fi
          
          # Filter PR workers
          PR_WORKERS=$(echo "$ALL_WORKERS" | grep '^phialo-pr-[0-9]\+$' || echo "")
          
          if [ -z "$PR_WORKERS" ] || [ "$PR_WORKERS" = "" ]; then
            echo "‚úÖ No PR workers found to delete"
            echo ""
            echo "Other workers in account:"
            OTHER_WORKERS=$(echo "$ALL_WORKERS" | grep -v '^phialo-pr-[0-9]\+$' || echo "")
            if [ -n "$OTHER_WORKERS" ]; then
              echo "$OTHER_WORKERS" | sed 's/^/  - /'
            fi
            
            echo "## ‚úÖ No PR Workers Found" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "No PR workers to delete." >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          
          # Count and list PR workers
          WORKER_COUNT=$(echo "$PR_WORKERS" | grep -c . || echo "0")
          echo "Found $WORKER_COUNT PR worker(s) to delete:"
          echo "$PR_WORKERS" | sed 's/^/  - /'
          echo ""
          
          # Get list of open PRs for context
          echo "üìÑ Checking for open PRs..."
          OPEN_PRS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               "https://api.github.com/repos/${{ github.repository }}/pulls?state=open&per_page=100" \
               | jq -r '.[].number' 2>/dev/null || echo "")
          
          # Identify orphaned workers
          echo "Analyzing worker status..."
          ORPHANED_COUNT=0
          for worker in $PR_WORKERS; do
            PR_NUM=${worker#phialo-pr-}
            if [ -z "$OPEN_PRS" ] || ! echo "$OPEN_PRS" | grep -q "^$PR_NUM$"; then
              echo "  ‚ö†Ô∏è  $worker - PR #$PR_NUM is CLOSED/MERGED (orphaned)"
              ORPHANED_COUNT=$((ORPHANED_COUNT + 1))
            else
              echo "  ‚úÖ $worker - PR #$PR_NUM is OPEN"
            fi
          done
          echo ""
          
          # Start deletion
          echo "========================================="
          echo "üóëÔ∏è  Starting deletion..."
          echo ""
          
          DELETED_COUNT=0
          FAILED_COUNT=0
          FAILED_WORKERS=""
          
          for worker in $PR_WORKERS; do
            echo -n "Deleting $worker... "
            if npx wrangler delete --name "$worker" --force 2>/dev/null; then
              echo "‚úÖ Deleted"
              DELETED_COUNT=$((DELETED_COUNT + 1))
            else
              echo "‚ùå Failed"
              FAILED_COUNT=$((FAILED_COUNT + 1))
              FAILED_WORKERS="$FAILED_WORKERS$worker\n"
            fi
          done
          
          echo ""
          echo "========================================="
          echo "Summary:"
          echo "  ‚úÖ Deleted: $DELETED_COUNT"
          if [ $FAILED_COUNT -gt 0 ]; then
            echo "  ‚ùå Failed: $FAILED_COUNT"
            if [ -n "$FAILED_WORKERS" ]; then
              echo ""
              echo "Failed workers:"
              echo -e "$FAILED_WORKERS" | sed 's/^/    - /'
            fi
          fi
          
          # Add to summary
          echo "## üìã List and Delete PR Workers Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Statistics" >> $GITHUB_STEP_SUMMARY
          echo "- **Workers Found:** $WORKER_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Orphaned Workers:** $ORPHANED_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Successfully Deleted:** $DELETED_COUNT" >> $GITHUB_STEP_SUMMARY
          if [ $FAILED_COUNT -gt 0 ]; then
            echo "- **Failed:** $FAILED_COUNT" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Environment Used" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ github.event.inputs.environment || 'preview' }}" >> $GITHUB_STEP_SUMMARY