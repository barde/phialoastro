---
name: Deploy Worker Preview

'on':
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'workers/**'
      - 'phialo-design/**'
      - '.github/workflows/worker-preview.yml'

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    environment: cloudflare
    permissions:
      pull-requests: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            phialo-design/package-lock.json
            workers/package-lock.json

      - name: Install dependencies (main project)
        working-directory: phialo-design
        run: npm ci

      - name: Build Astro site
        working-directory: phialo-design
        run: npm run build

      - name: Install dependencies (workers)
        working-directory: workers
        run: npm ci

      - name: Deploy Worker Preview
        id: deploy
        working-directory: workers
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          # Check if Cloudflare secrets are configured
          if [ -z "$CLOUDFLARE_API_TOKEN" ]; then
            echo "::error::CLOUDFLARE_API_TOKEN secret is not configured"
            echo "::notice::Add CLOUDFLARE_API_TOKEN to repo secrets"
            echo ""
            echo "To fix this issue:"
            echo "1. Go to repo settings > Secrets and variables > Actions"
            echo "2. Click 'New repository secret'"
            echo "3. Name: CLOUDFLARE_API_TOKEN"
            echo "4. Value: Your Cloudflare API token"
            echo ""
            echo "To create a Cloudflare API token:"
            echo "- Visit https://dash.cloudflare.com/profile/api-tokens"
            echo "- Create token with these permissions:"
            echo "  - Workers Scripts:Edit"
            echo "  - Workers KV Storage:Edit"
            exit 1
          fi

          if [ -z "$CLOUDFLARE_ACCOUNT_ID" ]; then
            echo "::error::CLOUDFLARE_ACCOUNT_ID secret is not configured"
            echo "::notice::Add CLOUDFLARE_ACCOUNT_ID to repo secrets"
            echo ""
            echo "To fix this issue:"
            echo "1. Go to repo settings > Secrets and variables > Actions"
            echo "2. Click 'New repository secret'"
            echo "3. Name: CLOUDFLARE_ACCOUNT_ID"
            echo "4. Value: Your Cloudflare Account ID"
            echo ""
            echo "To find your Account ID:"
            echo "- Visit https://dash.cloudflare.com/"
            echo "- Select your account"
            echo "- Find the Account ID in the right sidebar"
            exit 1
          fi
          # Get the branch name from the PR
          BRANCH_NAME="${{ github.head_ref }}"

          echo "Starting deployment..."
          # Deploy to preview environment and capture output
          DEPLOY_OUTPUT=$(npx wrangler deploy --env preview 2>&1) || {
            echo "Deployment failed with exit code: $?"
            echo "Output:"
            echo "$DEPLOY_OUTPUT"
            exit 1
          }
          echo "Deployment output:"
          echo "$DEPLOY_OUTPUT"

          # Extract the deployment URL from the output
          # Wrangler outputs: "Deployed phialo-design-preview triggers
          # (X.XX sec)" followed by the URL on the next line
          PREVIEW_URL=$(echo "$DEPLOY_OUTPUT" | \
            grep -E "https://.*workers\.dev" | tail -1 | tr -d '[:space:]')

          # If we couldn't extract the URL, use default pattern
          if [ -z "$PREVIEW_URL" ]; then
            # Try to get subdomain from account ID
            SUBDOMAIN=$(echo "$CLOUDFLARE_ACCOUNT_ID" | cut -c1-8)
            PREVIEW_URL="https://phialo-design-preview.${SUBDOMAIN}.workers.dev"
          fi

          echo "preview_url=${PREVIEW_URL}" >> $GITHUB_OUTPUT
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT

          # Verify deployment succeeded
          if [ -z "$PREVIEW_URL" ]; then
            echo "::error::Failed to extract preview URL from deployment output"
            exit 1
          fi

      - name: Verify deployment
        run: |
          echo "Testing preview URL: ${{ steps.deploy.outputs.preview_url }}"
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            "${{ steps.deploy.outputs.preview_url }}")
          if [ "$HTTP_CODE" -ne 200 ]; then
            echo "::error::Preview deployment returned HTTP $HTTP_CODE"
            exit 1
          fi
          echo "✅ Preview deployment is accessible (HTTP $HTTP_CODE)"

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const preview_url = '${{ steps.deploy.outputs.preview_url }}';
            const branch_name = '${{ steps.deploy.outputs.branch_name }}';
            const pr_number = context.issue.number;
            const sha = context.sha.substring(0, 7);

            // Find existing comment
            let botComment = null;
            try {
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
              });

              botComment = comments.data.find(comment =>
                comment.user && comment.user.type === 'Bot' &&
                comment.body &&
                comment.body.includes('Cloudflare Workers Preview')
              );
            } catch (error) {
              console.log('Could not fetch existing comments:', error.message);
            }

            const body = `### 🚀 Cloudflare Workers Preview Deployed!

            <table>
            <tr>
            <td><strong>🔗 Preview URL</strong></td>
            <td><a href="${preview_url}">${preview_url}</a></td>
            </tr>
            <tr>
            <td><strong>🌿 Branch</strong></td>
            <td><code>${branch_name}</code></td>
            </tr>
            <tr>
            <td><strong>📝 Commit</strong></td>
            <td><code>${sha}</code></td>
            </tr>
            <tr>
            <td><strong>🕐 Deployed</strong></td>
            <td>${new Date().toUTCString()}</td>
            </tr>
            </table>

            ---

            <details>
            <summary>ℹ️ <strong>Preview Information</strong></summary>

            - 🔄 This preview will be automatically updated on each commit
            - 🌍 The preview runs on Cloudflare's global edge network
            - 🔒 Security headers and CSP policies are active
            - 💾 Edge caching is enabled for optimal performance
            - 🐛 Check browser DevTools for any console errors

            </details>`;

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: body
              });
            }
