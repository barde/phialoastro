name: Deploy Worker Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'workers/**'
      - 'phialo-design/**'
      - '.github/workflows/worker-preview.yml'

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            phialo-design/package-lock.json
            workers/package-lock.json

      - name: Install dependencies (main project)
        working-directory: phialo-design
        run: npm ci

      - name: Build Astro site
        working-directory: phialo-design
        run: npm run build

      - name: Install dependencies (workers)
        working-directory: workers
        run: npm ci

      - name: Deploy Worker Preview
        id: deploy
        working-directory: workers
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          # Get the branch name from the PR
          BRANCH_NAME="${{ github.head_ref }}"
          
          # Deploy to branch-specific environment
          npx wrangler deploy --env preview
          
          # Get the deployment URL from wrangler output
          # Wrangler outputs the URL in the format: https://<worker-name>.<subdomain>.workers.dev
          DEPLOYMENT_OUTPUT=$(npx wrangler deployments list --env preview | grep -E "https://.*workers\.dev" | head -1 | awk '{print $2}')
          
          # If we can't get the URL from deployments, construct it
          if [ -z "$DEPLOYMENT_OUTPUT" ]; then
            # Use the branch-specific URL format
            WORKER_NAME="phialo-design-preview"
            SUBDOMAIN="${BRANCH_NAME//\//-}" # Replace slashes with dashes
            SUBDOMAIN="${SUBDOMAIN,,}" # Convert to lowercase
            PREVIEW_URL="https://${WORKER_NAME}.${SUBDOMAIN}.workers.dev"
          else
            PREVIEW_URL="$DEPLOYMENT_OUTPUT"
          fi
          
          echo "preview_url=${PREVIEW_URL}" >> $GITHUB_OUTPUT
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const preview_url = '${{ steps.deploy.outputs.preview_url }}';
            const branch_name = '${{ steps.deploy.outputs.branch_name }}';
            const pr_number = context.issue.number;
            const sha = context.sha.substring(0, 7);
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Cloudflare Workers Preview')
            );
            
            const body = `### 🚀 Cloudflare Workers Preview Deployed!
            
<table>
<tr>
<td><strong>🔗 Preview URL</strong></td>
<td><a href="${preview_url}">${preview_url}</a></td>
</tr>
<tr>
<td><strong>🌿 Branch</strong></td>
<td><code>${branch_name}</code></td>
</tr>
<tr>
<td><strong>📝 Commit</strong></td>
<td><code>${sha}</code></td>
</tr>
<tr>
<td><strong>🕐 Deployed</strong></td>
<td>${new Date().toUTCString()}</td>
</tr>
</table>

---

<details>
<summary>ℹ️ <strong>Preview Information</strong></summary>

- 🔄 This preview will be automatically updated on each commit
- 🌍 The preview runs on Cloudflare's global edge network
- 🔒 Security headers and CSP policies are active
- 💾 Edge caching is enabled for optimal performance
- 🐛 Check browser DevTools for any console errors

</details>`;
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: body
              });
            }