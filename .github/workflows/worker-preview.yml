---
name: Deploy Preview from Master

'on':
  push:
    branches:
      - master
    paths:
      - 'workers/**'
      - 'phialo-design/**'
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy to preview'
        required: false
        default: 'master'

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    environment: cloudflare
    permissions:
      pull-requests: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || 'master' }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies (main project)
        working-directory: phialo-design
        run: npm install

      - name: Build Astro site
        working-directory: phialo-design
        env:
          PUBLIC_WEB3FORMS_ACCESS_KEY: ${{ secrets.WEB3FORMS_ACCESS_KEY }}
        run: npm run build

      - name: Install dependencies (workers)
        working-directory: workers
        run: npm install

      - name: Deploy Worker Preview
        id: deploy
        working-directory: workers
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          # Check if Cloudflare secrets are configured
          if [ -z "$CLOUDFLARE_API_TOKEN" ]; then
            echo "::error::CLOUDFLARE_API_TOKEN secret is not configured"
            echo "::notice::Add CLOUDFLARE_API_TOKEN to repo secrets"
            echo ""
            echo "To fix this issue:"
            echo "1. Go to repo settings > Secrets and variables > Actions"
            echo "2. Click 'New repository secret'"
            echo "3. Name: CLOUDFLARE_API_TOKEN"
            echo "4. Value: Your Cloudflare API token"
            echo ""
            echo "To create a Cloudflare API token:"
            echo "- Visit https://dash.cloudflare.com/profile/api-tokens"
            echo "- Create token with these permissions:"
            echo "  - Workers Scripts:Edit"
            echo "  - Workers KV Storage:Edit"
            exit 1
          fi

          if [ -z "$CLOUDFLARE_ACCOUNT_ID" ]; then
            echo "::error::CLOUDFLARE_ACCOUNT_ID secret is not configured"
            echo "::notice::Add CLOUDFLARE_ACCOUNT_ID to repo secrets"
            echo ""
            echo "To fix this issue:"
            echo "1. Go to repo settings > Secrets and variables > Actions"
            echo "2. Click 'New repository secret'"
            echo "3. Name: CLOUDFLARE_ACCOUNT_ID"
            echo "4. Value: Your Cloudflare Account ID"
            echo ""
            echo "To find your Account ID:"
            echo "- Visit https://dash.cloudflare.com/"
            echo "- Select your account"
            echo "- Find the Account ID in the right sidebar"
            exit 1
          fi
          # Get the branch name
          BRANCH_NAME="${{ github.event.inputs.branch || 'master' }}"

          echo "Starting deployment..."
          # Deploy to preview environment and capture output
          DEPLOY_OUTPUT=$(npx wrangler deploy --env preview 2>&1) || {
            echo "Deployment failed with exit code: $?"
            echo "Output:"
            echo "$DEPLOY_OUTPUT"
            exit 1
          }
          echo "Deployment output:"
          echo "$DEPLOY_OUTPUT"

          # Extract the deployment URL from the output
          # Wrangler outputs: "Deployed phialo-design-preview triggers
          # (X.XX sec)" followed by the URL on the next line
          PREVIEW_URL=$(echo "$DEPLOY_OUTPUT" | \
            grep -E "https://.*workers\.dev" | tail -1 | tr -d '[:space:]')

          # If we couldn't extract the URL, use default pattern
          if [ -z "$PREVIEW_URL" ]; then
            echo "Failed to extract URL from output, using default pattern"
            # Try to get subdomain from account ID
            SUBDOMAIN=$(echo "$CLOUDFLARE_ACCOUNT_ID" | cut -c1-8)
            PREVIEW_URL="https://phialo-design-preview.${SUBDOMAIN}.workers.dev"
          fi

          echo "Extracted preview URL: ${PREVIEW_URL}"
          echo "preview_url=${PREVIEW_URL}" >> $GITHUB_OUTPUT
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT

          # Verify deployment succeeded
          if [ -z "$PREVIEW_URL" ]; then
            echo "::error::Failed to extract preview URL from deployment output"
            exit 1
          fi

      - name: Verify deployment
        run: |
          PREVIEW_URL="${{ steps.deploy.outputs.preview_url }}"
          echo "Testing preview URL: $PREVIEW_URL"
          
          # Retry logic to handle propagation delays
          MAX_RETRIES=5
          RETRY_DELAY=3
          
          for i in $(seq 1 $MAX_RETRIES); do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$PREVIEW_URL")
            
            if [ "$HTTP_CODE" -eq 200 ]; then
              echo "✅ Preview deployment is accessible (HTTP $HTTP_CODE)"
              exit 0
            else
              echo "Attempt $i/$MAX_RETRIES: HTTP $HTTP_CODE"
              if [ $i -lt $MAX_RETRIES ]; then
                echo "Waiting ${RETRY_DELAY}s before retry..."
                sleep $RETRY_DELAY
              fi
            fi
          done
          
          echo "::error::Preview deployment returned HTTP $HTTP_CODE after $MAX_RETRIES attempts"
          exit 1

      - name: Create deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const preview_url = '${{ steps.deploy.outputs.preview_url }}';
            const branch_name = '${{ steps.deploy.outputs.branch_name }}';
            const sha = context.sha.substring(0, 7);

            // Create a deployment status
            console.log(`✅ Preview deployed to ${preview_url}`);
            console.log(`   Branch: ${branch_name}`);
            console.log(`   Commit: ${sha}`);
            console.log(`   Time: ${new Date().toUTCString()}`);
