name: Performance Check v2

on:
  workflow_run:
    workflows: ["Cloudflare PR Preview Deployment"]
    types: [completed]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to test (leave empty to test master)'
        required: false
        type: string
      test_local:
        description: 'Test local build instead of deployed URL'
        required: false
        type: boolean
        default: false

jobs:
  performance-check:
    # Only run if the deployment workflow succeeded or this is a manual trigger
    if: |
      github.event_name == 'workflow_dispatch' || 
      github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
      actions: read
    
    steps:
      - name: Get PR details
        id: pr-details
        uses: actions/github-script@v7
        with:
          script: |
            let prNumber;
            let targetUrl;
            let isLocal = false;
            
            if (context.eventName === 'workflow_dispatch') {
              // Manual trigger
              prNumber = context.payload.inputs?.pr_number || '';
              isLocal = context.payload.inputs?.test_local === 'true';
              
              if (prNumber) {
                targetUrl = `https://phialo-pr-${prNumber}.meise.workers.dev`;
              } else {
                // Testing master branch
                targetUrl = 'https://phialo-master.meise.workers.dev';
              }
            } else {
              // Triggered by workflow_run
              const workflows = context.payload.workflow_run.pull_requests;
              if (workflows && workflows.length > 0) {
                prNumber = workflows[0].number;
                targetUrl = `https://phialo-pr-${prNumber}.meise.workers.dev`;
              } else {
                // Workflow run on master branch
                targetUrl = 'https://phialo-master.meise.workers.dev';
              }
            }
            
            core.setOutput('pr_number', prNumber);
            core.setOutput('target_url', targetUrl);
            core.setOutput('is_local', isLocal);
            core.setOutput('is_pr', !!prNumber);
            
            console.log(`PR Number: ${prNumber || 'N/A (master branch)'}`);
            console.log(`Target URL: ${targetUrl}`);
            console.log(`Test Local: ${isLocal}`);
      
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: ${{ steps.pr-details.outputs.is_pr == 'true' && format('refs/pull/{0}/head', steps.pr-details.outputs.pr_number) || 'refs/heads/master' }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.14.4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: phialo-design/pnpm-lock.yaml
      
      - name: Install dependencies
        working-directory: phialo-design
        run: pnpm install --frozen-lockfile
      
      # Build and start local server only if testing locally
      - name: Build application (local testing)
        if: steps.pr-details.outputs.is_local == 'true'
        working-directory: phialo-design
        run: pnpm run build
        env:
          PUBLIC_CLOUDFLARE_ANALYTICS_TOKEN: ${{ secrets.PUBLIC_CLOUDFLARE_ANALYTICS_TOKEN }}
      
      - name: Start preview server (local testing)
        if: steps.pr-details.outputs.is_local == 'true'
        working-directory: phialo-design
        run: |
          pnpm run preview &
          sleep 5
      
      # Wait for deployment to be ready if testing deployed URL
      - name: Wait for deployment readiness
        if: steps.pr-details.outputs.is_local != 'true'
        id: wait-deployment
        run: |
          URL="${{ steps.pr-details.outputs.target_url }}"
          MAX_ATTEMPTS=30
          SLEEP_INTERVAL=10
          
          echo "🕐 Waiting for deployment to be ready at $URL..."
          echo "⏳ Initial wait for Cloudflare Workers propagation (30s)..."
          sleep 30
          
          for i in $(seq 1 $MAX_ATTEMPTS); do
            echo "🔄 Attempt $i/$MAX_ATTEMPTS: Checking deployment..."
            
            # Check HTTP status and capture response
            HTTP_CODE=$(curl -s -o /tmp/response.html -w "%{http_code}" -L "$URL" || echo "000")
            
            case "$HTTP_CODE" in
              200|201|202)
                echo "✅ Deployment is ready! (HTTP $HTTP_CODE)"
                echo "ready=true" >> $GITHUB_OUTPUT
                # Additional wait to ensure full propagation
                echo "⏳ Final wait for complete propagation (10s)..."
                sleep 10
                exit 0
                ;;
              301|302|307|308)
                echo "↩️ Redirect detected (HTTP $HTTP_CODE), following..."
                ;;
              404)
                echo "❌ Not found (HTTP 404) - deployment may not be ready"
                ;;
              5*)
                echo "⚠️ Server error (HTTP $HTTP_CODE) - retrying..."
                ;;
              000)
                echo "🚫 Connection failed - retrying..."
                ;;
              *)
                echo "❓ Unexpected response (HTTP $HTTP_CODE) - retrying..."
                ;;
            esac
            
            if [ $i -lt $MAX_ATTEMPTS ]; then
              echo "⏳ Waiting ${SLEEP_INTERVAL}s before retry..."
              sleep $SLEEP_INTERVAL
            fi
          done
          
          echo "❌ Deployment not ready after $MAX_ATTEMPTS attempts"
          echo "ready=false" >> $GITHUB_OUTPUT
          exit 1
      
      - name: Create dynamic Lighthouse config
        working-directory: phialo-design
        run: |
          BASE_URL="${{ steps.pr-details.outputs.is_local == 'true' && 'http://localhost:4322' || steps.pr-details.outputs.target_url }}"
          
          cat > .lighthouserc.dynamic.js << EOF
          module.exports = {
            ci: {
              collect: {
                url: [
                  '${BASE_URL}/',
                  '${BASE_URL}/en/',
                  '${BASE_URL}/portfolio',
                  '${BASE_URL}/en/portfolio',
                  '${BASE_URL}/services',
                  '${BASE_URL}/en/services',
                  '${BASE_URL}/about',
                  '${BASE_URL}/en/about',
                  '${BASE_URL}/contact',
                  '${BASE_URL}/en/contact'
                ],
                numberOfRuns: 3,
                settings: {
                  preset: 'desktop',
                  throttling: {
                    cpuSlowdownMultiplier: 1
                  }
                }
              },
              assert: {
                assertions: {
                  'categories:performance': ['warn', { minScore: 0.85 }],
                  'categories:accessibility': ['warn', { minScore: 0.93 }],
                  'categories:best-practices': ['warn', { minScore: 0.93 }],
                  'categories:seo': ['warn', { minScore: 0.95 }],
                  
                  'first-contentful-paint': ['error', { maxNumericValue: 2000 }],
                  'largest-contentful-paint': ['error', { maxNumericValue: 2500 }],
                  'cumulative-layout-shift': ['warn', { maxNumericValue: 0.25 }],
                  'total-blocking-time': ['error', { maxNumericValue: 300 }],
                  'interactive': ['error', { maxNumericValue: 3800 }],
                  'speed-index': ['error', { maxNumericValue: 3400 }],
                  
                  'resource-summary:script:size': ['warn', { maxNumericValue: 1000000 }],
                  'resource-summary:stylesheet:size': ['warn', { maxNumericValue: 75000 }],
                  'resource-summary:image:size': ['warn', { maxNumericValue: 1100000 }],
                  'resource-summary:total:size': ['warn', { maxNumericValue: 2500000 }]
                }
              },
              upload: {
                target: 'temporary-public-storage',
                githubAppToken: process.env.LHCI_GITHUB_APP_TOKEN,
                githubStatusContextSuffix: '/performance-check'
              }
            }
          };
          EOF
      
      - name: Run Lighthouse CI
        working-directory: phialo-design
        run: |
          npx @lhci/cli@0.14.x autorun \
            --config=.lighthouserc.dynamic.js
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
      
      - name: Generate Performance Report
        working-directory: phialo-design
        run: |
          # Create the improved report with collapsible sections
          node << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          // Function to get status indicator
          function getStatus(value, goodThreshold, needsImprovementThreshold, unit = '') {
            const numValue = parseFloat(value);
            if (isNaN(numValue)) return '❓ N/A';
            
            if (numValue <= goodThreshold) {
              return '🟢';
            } else if (numValue <= needsImprovementThreshold) {
              return '🟡';
            } else {
              return '🔴';
            }
          }
          
          // Function to format value with unit
          function formatValue(value, unit = '') {
            if (value === null || value === undefined || isNaN(value)) {
              return 'N/A';
            }
            if (unit === 'ms') {
              return Math.round(value) + 'ms';
            } else if (unit === 's') {
              return (value / 1000).toFixed(1) + 's';
            } else if (unit === '') {
              return value.toFixed(3);
            }
            return value + unit;
          }
          
          // Read all Lighthouse results
          const lhciDir = '.lighthouseci';
          const results = [];
          const summaryData = [];
          
          if (fs.existsSync(lhciDir)) {
            const files = fs.readdirSync(lhciDir).filter(f => f.startsWith('lhr-') && f.endsWith('.json'));
            
            // Group results by URL
            const resultsByUrl = {};
            
            files.forEach(file => {
              const content = JSON.parse(fs.readFileSync(path.join(lhciDir, file), 'utf8'));
              const url = content.finalUrl || content.requestedUrl;
              const urlPath = new URL(url).pathname || '/';
              
              if (!resultsByUrl[urlPath]) {
                resultsByUrl[urlPath] = [];
              }
              resultsByUrl[urlPath].push(content);
            });
            
            // Calculate median values for each URL
            Object.entries(resultsByUrl).forEach(([urlPath, runs]) => {
              const medianRun = runs[Math.floor(runs.length / 2)];
              
              const lcp = medianRun.audits['largest-contentful-paint']?.numericValue || 0;
              const cls = medianRun.audits['cumulative-layout-shift']?.numericValue || 0;
              const tbt = medianRun.audits['total-blocking-time']?.numericValue || 0;
              const fcp = medianRun.audits['first-contentful-paint']?.numericValue || 0;
              const ttfb = medianRun.audits['server-response-time']?.numericValue || 0;
              const si = medianRun.audits['speed-index']?.numericValue || 0;
              const perfScore = Math.round((medianRun.categories?.performance?.score || 0) * 100);
              
              // Estimate INP from TBT (rough approximation)
              const inpEstimate = Math.round(tbt * 0.8);
              
              // Determine page name
              let pageName = urlPath === '/' ? 'Home' : 
                           urlPath === '/en/' ? 'Home (EN)' :
                           urlPath.replace(/^\/en\//, '').replace(/^\//, '').replace(/-/g, ' ');
              pageName = pageName.charAt(0).toUpperCase() + pageName.slice(1);
              if (urlPath.startsWith('/en/') && !urlPath.endsWith('/en/')) {
                pageName += ' (EN)';
              }
              
              // Add to summary data
              summaryData.push({
                page: pageName,
                score: perfScore,
                lcp: lcp,
                cls: cls,
                inp: inpEstimate,
                path: urlPath
              });
              
              // Store detailed results
              results.push({
                url: urlPath,
                pageName: pageName,
                lcp: lcp,
                cls: cls,
                inp: inpEstimate,
                fcp: fcp,
                ttfb: ttfb,
                si: si,
                perfScore: perfScore,
                accessibility: Math.round((medianRun.categories?.accessibility?.score || 0) * 100),
                bestPractices: Math.round((medianRun.categories?.['best-practices']?.score || 0) * 100),
                seo: Math.round((medianRun.categories?.seo?.score || 0) * 100)
              });
            });
          }
          
          // Generate the report
          let report = '## 📊 Core Web Vitals Report\n\n';
          
          // Determine test environment
          const isLocal = '${{ steps.pr-details.outputs.is_local }}' === 'true';
          const targetUrl = '${{ steps.pr-details.outputs.target_url }}';
          const prNumber = '${{ steps.pr-details.outputs.pr_number }}';
          
          report += `**Test Environment:** ${isLocal ? '🖥️ Local Build' : '🌐 ' + targetUrl}\n`;
          report += `**Test Date:** ${new Date().toISOString().split('T')[0]}\n\n`;
          
          // Calculate overall status
          const avgScore = summaryData.length > 0 
            ? Math.round(summaryData.reduce((acc, d) => acc + d.score, 0) / summaryData.length)
            : 0;
          const overallStatus = avgScore >= 90 ? '✅ Excellent' : 
                               avgScore >= 80 ? '🟢 Good' :
                               avgScore >= 70 ? '🟡 Needs Improvement' :
                               '🔴 Poor';
          
          report += `### ${overallStatus} - Overall Score: ${avgScore}/100\n\n`;
          
          // Summary table
          if (summaryData.length > 0) {
            report += '| Page | Performance | LCP | CLS | INP |\n';
            report += '|------|------------|-----|-----|-----|\n';
            
            summaryData.forEach(data => {
              const lcpStatus = getStatus(data.lcp, 2500, 4000);
              const clsStatus = getStatus(data.cls, 0.1, 0.25);
              const inpStatus = getStatus(data.inp, 200, 500);
              const scoreStatus = data.score >= 90 ? '🟢' : data.score >= 50 ? '🟡' : '🔴';
              
              report += `| ${data.page} | ${data.score} ${scoreStatus} | ${formatValue(data.lcp, 's')} ${lcpStatus} | ${formatValue(data.cls, '')} ${clsStatus} | ${formatValue(data.inp, 'ms')} ${inpStatus} |\n`;
            });
            
            report += '\n';
          }
          
          // Quick Actions
          const hasIssues = summaryData.some(d => d.score < 90);
          if (hasIssues) {
            report += '### ⚡ Quick Actions Needed\n\n';
            
            const slowLCP = summaryData.filter(d => d.lcp > 2500);
            const highCLS = summaryData.filter(d => d.cls > 0.1);
            const slowINP = summaryData.filter(d => d.inp > 200);
            
            if (slowLCP.length > 0) {
              report += `- 🖼️ **Optimize LCP** on: ${slowLCP.map(d => d.page).join(', ')}\n`;
            }
            if (highCLS.length > 0) {
              report += `- 📐 **Fix layout shifts** on: ${highCLS.map(d => d.page).join(', ')}\n`;
            }
            if (slowINP.length > 0) {
              report += `- ⚡ **Improve interactivity** on: ${slowINP.map(d => d.page).join(', ')}\n`;
            }
            report += '\n';
          }
          
          // Detailed reports in collapsible sections
          report += '<details>\n';
          report += '<summary><b>📋 Detailed Performance Metrics</b> (click to expand)</summary>\n\n';
          
          results.forEach(result => {
            report += `### 📄 ${result.pageName}\n\n`;
            report += '| Metric | Value | Status | Target |\n';
            report += '|--------|-------|--------|--------|\n';
            
            // Core Web Vitals
            const lcpStatus = getStatus(result.lcp, 2500, 4000);
            const clsStatus = getStatus(result.cls, 0.1, 0.25);
            const inpStatus = getStatus(result.inp, 200, 500);
            const fcpStatus = getStatus(result.fcp, 1800, 3000);
            const ttfbStatus = getStatus(result.ttfb, 800, 1800);
            const siStatus = getStatus(result.si, 3400, 5800);
            
            report += `| **LCP** (Largest Contentful Paint) | ${formatValue(result.lcp, 's')} | ${lcpStatus} | < 2.5s |\n`;
            report += `| **CLS** (Cumulative Layout Shift) | ${formatValue(result.cls, '')} | ${clsStatus} | < 0.1 |\n`;
            report += `| **INP** (Interaction to Next Paint)* | ${formatValue(result.inp, 'ms')} | ${inpStatus} | < 200ms |\n`;
            report += `| **FCP** (First Contentful Paint) | ${formatValue(result.fcp, 's')} | ${fcpStatus} | < 1.8s |\n`;
            report += `| **TTFB** (Time to First Byte) | ${formatValue(result.ttfb, 'ms')} | ${ttfbStatus} | < 800ms |\n`;
            report += `| **SI** (Speed Index) | ${formatValue(result.si, 's')} | ${siStatus} | < 3.4s |\n`;
            report += '\n';
          });
          
          report += '_*INP is estimated from Total Blocking Time. Real INP data requires field measurements._\n\n';
          report += '</details>\n\n';
          
          // Lighthouse scores in collapsible section
          report += '<details>\n';
          report += '<summary><b>🏆 Lighthouse Scores</b> (click to expand)</summary>\n\n';
          report += '| Page | Performance | Accessibility | Best Practices | SEO |\n';
          report += '|------|------------|---------------|----------------|-----|\n';
          
          results.forEach(result => {
            const perfIcon = result.perfScore >= 90 ? '🟢' : result.perfScore >= 50 ? '🟡' : '🔴';
            const a11yIcon = result.accessibility >= 90 ? '🟢' : result.accessibility >= 50 ? '🟡' : '🔴';
            const bpIcon = result.bestPractices >= 90 ? '🟢' : result.bestPractices >= 50 ? '🟡' : '🔴';
            const seoIcon = result.seo >= 90 ? '🟢' : result.seo >= 50 ? '🟡' : '🔴';
            
            report += `| ${result.pageName} | ${result.perfScore} ${perfIcon} | ${result.accessibility} ${a11yIcon} | ${result.bestPractices} ${bpIcon} | ${result.seo} ${seoIcon} |\n`;
          });
          
          report += '\n</details>\n\n';
          
          // Resources section
          report += '<details>\n';
          report += '<summary><b>📚 Resources & Next Steps</b> (click to expand)</summary>\n\n';
          report += '### 🔍 Performance Tools\n';
          report += '- [PageSpeed Insights](https://pagespeed.web.dev/) - Test production performance\n';
          report += '- [WebPageTest](https://www.webpagetest.org/) - Advanced performance testing\n';
          report += '- [Chrome DevTools Performance](https://developer.chrome.com/docs/devtools/performance/) - Local profiling\n\n';
          report += '### 📖 Optimization Guides\n';
          report += '- [Web Vitals](https://web.dev/vitals/) - Core metrics explained\n';
          report += '- [LCP Optimization](https://web.dev/optimize-lcp/) - Improve loading performance\n';
          report += '- [CLS Optimization](https://web.dev/optimize-cls/) - Prevent layout shifts\n';
          report += '- [INP Optimization](https://web.dev/optimize-inp/) - Enhance interactivity\n\n';
          report += '</details>\n\n';
          
          // Footer
          report += '---\n';
          report += `_Generated by Performance Check v2 workflow on ${new Date().toUTCString()}_\n`;
          if (!isLocal) {
            report += `_Testing against deployed preview: ${targetUrl}_\n`;
          } else {
            report += '_Testing against local build on localhost:4322_\n';
          }
          
          // Write the report
          fs.writeFileSync('performance-report.md', report);
          console.log('Report generated successfully!');
          EOF
      
      - name: Post PR comment
        if: steps.pr-details.outputs.is_pr == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('phialo-design/performance-report.md', 'utf8');
            
            const prNumber = parseInt('${{ steps.pr-details.outputs.pr_number }}');
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Core Web Vitals Report')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: report
              });
              console.log(`Updated comment on PR #${prNumber}`);
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: report
              });
              console.log(`Created new comment on PR #${prNumber}`);
            }
      
      - name: Upload Lighthouse reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: phialo-design/.lighthouseci/
          retention-days: 7
      
      - name: Check for performance regressions
        working-directory: phialo-design
        run: |
          # Exit with error if critical performance budgets are exceeded
          REGRESSION_FOUND=false
          
          if [ -d ".lighthouseci" ]; then
            for file in .lighthouseci/assertion-results.json; do
              if [ -f "$file" ]; then
                failures=$(jq '[.[] | select(.level == "error")] | length' "$file")
                if [ "$failures" -gt "0" ]; then
                  echo "❌ Performance budgets exceeded! Found $failures errors."
                  jq '.[] | select(.level == "error")' "$file"
                  REGRESSION_FOUND=true
                fi
              fi
            done
          fi
          
          if [ "$REGRESSION_FOUND" = "true" ]; then
            echo "⚠️ Performance regressions detected. Please review the report above."
            exit 1
          else
            echo "✅ All performance checks passed!"
          fi