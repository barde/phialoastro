name: Cloudflare PR Preview Cleanup

on:
  pull_request:
    types: [closed]

jobs:
  cleanup-preview:
    runs-on: ubuntu-latest
    name: Clean up PR Preview Worker
    # Remove label dependency - always attempt cleanup for closed PRs
    # This ensures orphaned workers are cleaned up even if label addition failed
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Comprehensive PR preview worker cleanup
        id: delete_worker
        if: github.actor != 'dependabot[bot]'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          WORKER_NAME="phialo-pr-$PR_NUMBER"
          echo "=== Comprehensive Cleanup for PR #$PR_NUMBER ==="
          echo "Worker name: $WORKER_NAME"
          
          # Strategy 1: Check if worker exists via API
          echo "üîç Checking if worker exists..."
          RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/$WORKER_NAME" \
               -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
               -H "Content-Type: application/json")
          
          # Parse the response
          if echo "$RESPONSE" | grep -q '"success":true'; then
            echo "‚úì Worker $WORKER_NAME exists"
            
            # Strategy 2: Try deletion via API (since wrangler delete doesn't exist)
            echo "üóëÔ∏è Attempting to delete worker via API..."
            DELETE_RESPONSE=$(curl -s -X DELETE "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/$WORKER_NAME" \
                 -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
                 -H "Content-Type: application/json")
            
            if echo "$DELETE_RESPONSE" | grep -q '"success":true'; then
              echo "‚úÖ Successfully deleted $WORKER_NAME via API"
              echo "deleted=true" >> $GITHUB_OUTPUT
              echo "deletion_method=api" >> $GITHUB_OUTPUT
            else
              echo "‚ùå Failed to delete $WORKER_NAME via API"
              echo "API Response: $DELETE_RESPONSE"
              
              # Strategy 3: Fallback to wrangler if available
              echo "üîÑ Attempting fallback deletion with wrangler..."
              cd ./workers 2>/dev/null || mkdir -p ./workers
              
              # Install wrangler if needed
              if ! command -v wrangler &> /dev/null; then
                npm install wrangler@4.27.0
              fi
              
              # Try wrangler delete (even though it doesn't officially exist, some versions might support it)
              if npx wrangler delete --name "$WORKER_NAME" --force 2>/dev/null; then
                echo "‚úÖ Successfully deleted $WORKER_NAME via wrangler"
                echo "deleted=true" >> $GITHUB_OUTPUT
                echo "deletion_method=wrangler" >> $GITHUB_OUTPUT
              else
                echo "‚ùå Could not delete worker with wrangler either"
                echo "deleted=false" >> $GITHUB_OUTPUT
                echo "deletion_method=failed" >> $GITHUB_OUTPUT
              fi
            fi
          else
            echo "‚ÑπÔ∏è Worker $WORKER_NAME does not exist (may have been already deleted or never created)"
            echo "deleted=false" >> $GITHUB_OUTPUT
            echo "deletion_method=not_found" >> $GITHUB_OUTPUT
          fi
          
          echo "=== Cleanup attempt completed ==="
      
      - name: Comment on PR about cleanup
        # Only comment if a worker was actually deleted
        if: steps.delete_worker.outputs.deleted == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr_number = context.issue.number;
            const identifier = '<!-- cloudflare-preview-cleanup -->';
            const body = identifier + '\n' +
              '## üßπ Preview Deployment Cleaned Up\n\n' +
              'The Cloudflare preview deployment for this PR has been removed.\n';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
              body: body
            });
      
      - name: Clean up deployment labels
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Remove all deployment-related labels regardless of worker deletion status
            const labelsToRemove = ['preview-deployed', 'deploying', 'deployment-failed'];
            
            for (const labelName of labelsToRemove) {
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  name: labelName
                });
                console.log(`‚úì Removed label: ${labelName}`);
              } catch (error) {
                if (error.status === 404) {
                  console.log(`‚ÑπÔ∏è Label '${labelName}' not found (may not have been added)`);
                } else if (error.status === 401 || error.status === 403) {
                  console.log(`‚ö†Ô∏è No permission to remove label '${labelName}'`);
                } else {
                  console.log(`‚ùå Error removing label '${labelName}': ${error.message}`);
                  // Don't throw - continue with other labels
                }
              }
            }
            
            console.log("Label cleanup completed");