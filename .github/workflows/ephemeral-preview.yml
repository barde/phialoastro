name: Ephemeral Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'workers/**'
      - 'phialo-design/**'
      - '.github/workflows/ephemeral-preview.yml'

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    environment: cloudflare
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm install --prefix phialo-design
          npm install --prefix workers
      
      - name: Build Astro site
        env:
          ENVIRONMENT: preview
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          cd phialo-design
          npm run build
      
      - name: Deploy to ephemeral environment
        id: deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          cd workers
          # Create unique worker name
          WORKER_NAME="phialo-pr-${{ github.event.pull_request.number }}"
          
          # Deploy with dynamic worker name and capture output
          # Note: We need to specify the entry point and site configuration explicitly
          # when using --name flag, as it doesn't use wrangler.toml settings
          DEPLOY_OUTPUT=$(npx wrangler deploy src/index.ts \
            --name "$WORKER_NAME" \
            --compatibility-date "2024-01-01" \
            --site ../phialo-design/dist \
            --var ENVIRONMENT:preview \
            --var PR_NUMBER:${{ github.event.pull_request.number }} 2>&1)
          
          echo "Deploy output:"
          echo "$DEPLOY_OUTPUT"
          
          # Extract the URL from deployment output
          # Wrangler outputs: "Published phialo-pr-106 (version = ...) https://phialo-pr-106.subdomain.workers.dev"
          PREVIEW_URL=$(echo "$DEPLOY_OUTPUT" | grep -oE 'https://[^ ]+\.workers\.dev' | tail -1)
          
          # If we couldn't extract the URL, try another method
          if [ -z "$PREVIEW_URL" ]; then
            echo "Failed to extract URL from deployment output, trying wrangler deployments list"
            PREVIEW_URL=$(npx wrangler deployments list --name "$WORKER_NAME" --json 2>/dev/null | jq -r '.[0].url // empty' || echo "")
          fi
          
          # Final fallback - construct URL using known pattern
          if [ -z "$PREVIEW_URL" ]; then
            echo "Still no URL, using fallback pattern"
            # For this account, the subdomain appears to be a complex string, so let's use a known pattern
            PREVIEW_URL="https://${WORKER_NAME}.meise.workers.dev"
          fi
          
          echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT
      
      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const preview_url = '${{ steps.deploy.outputs.preview_url }}';
            const pr_number = context.issue.number;
            
            // Get the PR details to find linked issues
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });
            
            // Extract issue number from PR body or title
            const issueMatch = pr.body?.match(/#(\d+)/) || pr.title?.match(/#(\d+)/);
            let issueOwner = null;
            
            if (issueMatch) {
              const issueNumber = issueMatch[1];
              try {
                const { data: issue } = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parseInt(issueNumber)
                });
                issueOwner = issue.user.login;
              } catch (e) {
                console.log(`Could not fetch issue #${issueNumber}: ${e.message}`);
              }
            }
            
            // Find and update existing comment or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Preview Deployment')
            );
            
            const mentionLine = issueOwner ? `@${issueOwner} Your preview is ready at: ${preview_url}` : `Your preview is ready at: ${preview_url}`;
            
            const body = `## ðŸš€ Preview Deployment
            
            ${mentionLine}
            
            **Environment Details:**
            - Worker: \`phialo-pr-${pr_number}\`
            - Branch: \`${context.payload.pull_request.head.ref}\`
            - Commit: \`${context.sha.substring(0, 7)}\`
            
            This preview will be automatically deleted when the PR is closed or merged.`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body
              });
            }