name: Notify Issue Owner on PR

on:
  pull_request:
    types: [opened, synchronize]
  check_suite:
    types: [completed]

jobs:
  notify-issue-owner:
    if: github.event_name == 'pull_request' || (github.event_name == 'check_suite' && github.event.check_suite.conclusion == 'success')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Extract issue number from PR
        id: extract-issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let pr = context.payload.pull_request;
            
            // If not a pull_request event, try to get PR from check_suite
            if (!pr && context.payload.check_suite) {
              const pulls = context.payload.check_suite.pull_requests;
              if (pulls && pulls.length > 0) {
                pr = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pulls[0].number
                }).then(res => res.data);
              }
            }
            
            // If still no PR and we have context.issue, try that
            if (!pr && context.issue && context.issue.number) {
              try {
                pr = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number
                }).then(res => res.data);
              } catch (error) {
                console.log('Could not fetch PR from issue context:', error.message);
              }
            }
            
            if (!pr) {
              console.log('No PR found');
              return;
            }
            
            // Extract issue number from PR title or body
            const prContent = `${pr.title} ${pr.body || ''}`;
            const issueMatches = prContent.match(/#(\d+)/g);
            
            if (!issueMatches) {
              console.log('No issue reference found in PR');
              return;
            }
            
            const issueNumbers = issueMatches.map(match => match.replace('#', ''));
            core.setOutput('issue_numbers', issueNumbers.join(','));
            core.setOutput('pr_number', pr.number);
            core.setOutput('pr_author', pr.user.login);
            
      - name: Get issue details and notify in issues
        if: steps.extract-issue.outputs.issue_numbers
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumbers = '${{ steps.extract-issue.outputs.issue_numbers }}'.split(',');
            const prNumber = '${{ steps.extract-issue.outputs.pr_number }}';
            const prAuthor = '${{ steps.extract-issue.outputs.pr_author }}';
            
            // Get PR details for the link
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: parseInt(prNumber)
            });
            
            for (const issueNumber of issueNumbers) {
              try {
                const issue = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parseInt(issueNumber)
                });
                
                // Skip if issue was created by a bot
                if (issue.data.user.type === 'Bot') {
                  console.log(`Skipping issue #${issueNumber} - created by bot ${issue.data.user.login}`);
                  continue;
                }
                
                // Skip if PR author is the issue owner
                if (issue.data.user.login === prAuthor) {
                  console.log(`Skipping issue #${issueNumber} - PR author is issue owner`);
                  continue;
                }
                
                // Check if we've already commented on this issue about this PR
                const comments = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parseInt(issueNumber)
                });
                
                const existingComment = comments.data.find(comment => 
                  comment.user.type === 'Bot' && 
                  comment.body.includes('<!-- notify-issue-owner-bot -->') &&
                  comment.body.includes(`#${prNumber}`)
                );
                
                if (existingComment) {
                  console.log(`Already notified issue #${issueNumber} about PR #${prNumber}`);
                  continue;
                }
                
                // Post comment in the issue
                const commentBody = '<!-- notify-issue-owner-bot -->\n' +
                  `Hi @${issue.data.user.login}! ðŸ‘‹\n\n` +
                  `PR #${prNumber} has been created to address this issue.\n\n` +
                  `ðŸ”— **Pull Request**: ${pr.data.title} (#${prNumber})\n` +
                  `ðŸ‘¤ **Author**: @${prAuthor}\n` +
                  `ðŸ“Š **Status**: ${pr.data.state}\n\n` +
                  `Please feel free to review the changes and provide feedback on the PR.\n\n` +
                  'Thank you for reporting this issue!';
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parseInt(issueNumber),
                  body: commentBody
                });
                
                console.log(`Notified issue #${issueNumber} owner @${issue.data.user.login} about PR #${prNumber}`);
              } catch (error) {
                console.log(`Could not process issue #${issueNumber}: ${error.message}`);
              }
            }