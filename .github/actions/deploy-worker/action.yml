name: 'Deploy Cloudflare Worker'
description: 'Deploy to Cloudflare Workers with all required secrets'
inputs:
  environment:
    description: 'Deployment environment (preview/production)'
    required: true
  worker-name:
    description: 'Name of the worker to deploy'
    required: true
  working-directory:
    description: 'Working directory for deployment'
    required: false
    default: './workers'
  CLOUDFLARE_API_TOKEN:
    description: 'Cloudflare API token'
    required: true
  CLOUDFLARE_ACCOUNT_ID:
    description: 'Cloudflare account ID'
    required: true
  RESEND_API_KEY:
    description: 'Resend API key for email'
    required: true
  FROM_EMAIL:
    description: 'From email address'
    required: true
  TO_EMAIL:
    description: 'To email address'
    required: true
  TURNSTILE_SECRET_KEY:
    description: 'Turnstile secret key'
    required: true
  REPLY_TO_EMAIL:
    description: 'Reply-to email address (optional)'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Deploy to Cloudflare Workers
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      env:
        CLOUDFLARE_API_TOKEN: ${{ inputs.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ inputs.CLOUDFLARE_ACCOUNT_ID }}
      run: |
        # Ensure environment variables are exported
        export CLOUDFLARE_API_TOKEN="${{ inputs.CLOUDFLARE_API_TOKEN }}"
        export CLOUDFLARE_ACCOUNT_ID="${{ inputs.CLOUDFLARE_ACCOUNT_ID }}"
        
        # Debug: Check if credentials are set (without exposing them)
        if [ -z "$CLOUDFLARE_API_TOKEN" ]; then
          echo "ERROR: CLOUDFLARE_API_TOKEN is not set!"
          exit 1
        fi
        if [ -z "$CLOUDFLARE_ACCOUNT_ID" ]; then
          echo "ERROR: CLOUDFLARE_ACCOUNT_ID is not set!"
          exit 1
        fi
        echo "âœ“ Cloudflare credentials are configured"
        
        # Deploy the worker based on environment
        if [ "${{ inputs.environment }}" = "production" ]; then
          npx wrangler deploy --env production
        elif [ "${{ inputs.environment }}" = "master" ]; then
          # For master branch deployment, use specific config if it exists
          if [ -f "wrangler-master.toml" ]; then
            npx wrangler deploy --config wrangler-master.toml
          else
            npx wrangler deploy --env preview --name ${{ inputs.worker-name }}
          fi
        elif [ -f "wrangler.pr.toml" ]; then
          # For PR previews with custom config including Analytics Engine
          echo "Using PR config file: wrangler.pr.toml"
          npx wrangler deploy --config wrangler.pr.toml --name ${{ inputs.worker-name }}
        else
          # Default preview deployment
          npx wrangler deploy --env preview --name ${{ inputs.worker-name }}
        fi
        
    - name: Configure worker secrets
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      env:
        CLOUDFLARE_API_TOKEN: ${{ inputs.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ inputs.CLOUDFLARE_ACCOUNT_ID }}
      run: |
        # Set all required secrets for the deployed worker
        echo "${{ inputs.RESEND_API_KEY }}" | npx wrangler secret put RESEND_API_KEY --name ${{ inputs.worker-name }} --env=""
        echo "${{ inputs.FROM_EMAIL }}" | npx wrangler secret put FROM_EMAIL --name ${{ inputs.worker-name }} --env=""
        echo "${{ inputs.TO_EMAIL }}" | npx wrangler secret put TO_EMAIL --name ${{ inputs.worker-name }} --env=""
        echo "${{ inputs.TURNSTILE_SECRET_KEY }}" | npx wrangler secret put TURNSTILE_SECRET_KEY --name ${{ inputs.worker-name }} --env=""
        
        # Set optional REPLY_TO_EMAIL if provided
        if [ -n "${{ inputs.REPLY_TO_EMAIL }}" ]; then
          echo "${{ inputs.REPLY_TO_EMAIL }}" | npx wrangler secret put REPLY_TO_EMAIL --name ${{ inputs.worker-name }} --env=""
        fi