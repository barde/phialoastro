name: 'Setup Build Environment'
description: 'Setup Node.js, pnpm, and install dependencies with comprehensive caching'
inputs:
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '20'
  pnpm-version:
    description: 'pnpm version to use'
    required: false
    default: '9'
  install-design-deps:
    description: 'Install phialo-design dependencies'
    required: false
    default: 'true'
  install-worker-deps:
    description: 'Install workers dependencies'
    required: false
    default: 'true'
  use-cache:
    description: 'Use enhanced caching (pnpm store + node_modules)'
    required: false
    default: 'true'
  cache-version:
    description: 'Cache version to force cache invalidation when needed'
    required: false
    default: 'v1'
  working-directory:
    description: 'Working directory for the main project'
    required: false
    default: './phialo-design'

outputs:
  cache-hit-modules:
    description: 'Whether node_modules cache was hit'
    value: ${{ steps.cache-modules.outputs.cache-hit }}

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
    
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ inputs.pnpm-version }}
    
    - name: Get pnpm store directory
      if: inputs.use-cache == 'true'
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
    
    # Enhanced pnpm cache with better key strategy
    - name: Setup pnpm cache
      if: inputs.use-cache == 'true'
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ inputs.cache-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-${{ inputs.cache-version }}-
          ${{ runner.os }}-pnpm-store-
    
    # Cache node_modules for faster installs
    - name: Cache node_modules - phialo-design
      id: cache-modules
      if: inputs.use-cache == 'true' && inputs.install-design-deps == 'true'
      uses: actions/cache@v4
      with:
        path: ${{ inputs.working-directory }}/node_modules
        key: ${{ runner.os }}-node-modules-design-${{ inputs.cache-version }}-${{ hashFiles(format('{0}/pnpm-lock.yaml', inputs.working-directory)) }}
        restore-keys: |
          ${{ runner.os }}-node-modules-design-${{ inputs.cache-version }}-
    
    - name: Cache node_modules - workers
      if: inputs.use-cache == 'true' && inputs.install-worker-deps == 'true'
      uses: actions/cache@v4
      with:
        path: ./workers/node_modules
        key: ${{ runner.os }}-node-modules-workers-${{ inputs.cache-version }}-${{ hashFiles('workers/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-workers-${{ inputs.cache-version }}-
    
    # Install dependencies with cache-aware strategy
    - name: Install phialo-design dependencies
      if: inputs.install-design-deps == 'true'
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        # Check if node_modules exists and is valid
        if [ -d "node_modules" ] && [ -f "node_modules/.modules.yaml" ]; then
          echo "ðŸ“¦ node_modules found, running quick install check..."
          pnpm install --frozen-lockfile --prefer-offline
        else
          echo "ðŸ“¦ Installing dependencies from scratch..."
          pnpm install --frozen-lockfile
        fi
    
    - name: Install workers dependencies
      if: inputs.install-worker-deps == 'true'
      working-directory: ./workers
      shell: bash
      run: |
        # Check if node_modules exists and is valid
        if [ -d "node_modules" ] && [ -f "node_modules/.modules.yaml" ]; then
          echo "ðŸ“¦ node_modules found, running quick install check..."
          pnpm install --frozen-lockfile --prefer-offline
        else
          echo "ðŸ“¦ Installing dependencies from scratch..."
          pnpm install --frozen-lockfile
        fi
    
    - name: Install Wrangler
      if: inputs.install-worker-deps == 'true'
      working-directory: ./workers
      shell: bash
      run: |
        # Check if wrangler is already installed
        if pnpm list wrangler | grep -q "wrangler@4.22.0"; then
          echo "âœ“ Wrangler 4.22.0 already installed"
        else
          echo "ðŸ“¦ Installing Wrangler..."
          pnpm install wrangler@4.22.0
        fi
    
    # Log cache effectiveness
    - name: Report cache status
      if: inputs.use-cache == 'true'
      shell: bash
      run: |
        echo "ðŸ“Š Cache Status Report:"
        echo "------------------------"
        
        if [ -d "${{ inputs.working-directory }}/node_modules" ]; then
          DESIGN_MODULES=$(find ${{ inputs.working-directory }}/node_modules -maxdepth 1 -type d | wc -l)
          echo "âœ“ phialo-design: $DESIGN_MODULES modules cached"
        else
          echo "âœ— phialo-design: No cache (will install fresh)"
        fi
        
        if [ -d "./workers/node_modules" ]; then
          WORKER_MODULES=$(find ./workers/node_modules -maxdepth 1 -type d | wc -l)
          echo "âœ“ workers: $WORKER_MODULES modules cached"
        else
          echo "âœ— workers: No cache (will install fresh)"
        fi
        
        if [ ! -z "$STORE_PATH" ] && [ -d "$STORE_PATH" ]; then
          STORE_SIZE=$(du -sh "$STORE_PATH" 2>/dev/null | cut -f1 || echo "unknown")
          echo "âœ“ pnpm store: $STORE_SIZE"
        else
          echo "âœ— pnpm store: Not cached"
        fi